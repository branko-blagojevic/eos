stages:
  - prebuild
  - build:rpm
  - build:dockerimage
  - test
  - coverage
  - publish
  - clean


before_script:
  - source gitlab-ci/export_branch.sh
  - echo "Exporting BRANCH=${BRANCH}"


eosci-base_docker_image_commit:
  stage: prebuild
  image:
    name: gitlab-registry.cern.ch/ci-tools/docker-image-builder
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}"
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/gitlab-ci/eosci-base/Dockerfile --destination gitlab-registry.cern.ch/dss/eos/eosci-base
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - ${BUILD_NAME}_artifacts/


#-------------------------------------------------------------------------------
# Build templates
#-------------------------------------------------------------------------------

.cc7_template: &cc7_template_definition
  stage: build:rpm
  image: gitlab-registry.cern.ch/dss/eos/eosci-base
  script:
    - git submodule update --init --recursive
    - mkdir build; cd build/
    - cmake3 ../ -DPACKAGEONLY=1 ${CMAKE_OPTIONS}
    - make srpm
    - cd ../
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\npriority=2\n' >> /etc/yum.repos.d/eos-depend.repo
    - yum-builddep --nogpgcheck --setopt="cern*.exclude=xrootd*" -y build/SRPMS/*
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - if [ "$BUILD_TYPE" == "commit" ]; then source gitlab-ci/setup_ccache.sh; else export CCACHE_DISABLE=1; fi
    - rpmbuild --rebuild --with server ${RPMBUILD_OPTIONS} --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/*
    - ccache -s
    - if [ "$BUILD_TYPE" == "tag" ]; then gpg --allow-secret-key-import --import /keys/stci-debian-repo.sec; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir ${BUILD_NAME}_artifacts
    - cp -R build/SRPMS/ build/RPMS/ ${BUILD_NAME}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - ${BUILD_NAME}_artifacts/


#-------------------------------------------------------------------------------
# Kubernetes templates
#-------------------------------------------------------------------------------

.k8s_before_script_template: &k8s_before_script_template
  before_script:
    - . /home/gitlab-runner/coe-cluster-config/st-gitlab-k8s-02/env_st-gitlab-k8s-02.sh # get access configs for the cluster
    - NAMESPACE=$(echo ${CI_JOB_NAME}-${CI_JOB_ID}-${CI_PIPELINE_ID} | tr _ -)
    - if [[ "$CI_COMMIT_TAG" != "" ]]; then
        IMAGE_TAG="${BASETAG}${CI_COMMIT_TAG}";
      else
        IMAGE_TAG="${BASETAG}${CI_PIPELINE_ID}";
      fi;
    - git clone https://gitlab.cern.ch/eos/eos-on-k8s.git


.k8s_after_script_template: &k8s_after_script_template
  after_script:
    - . /home/gitlab-runner/coe-cluster-config/st-gitlab-k8s-02/env_st-gitlab-k8s-02.sh # get access configs for the cluster
    - NAMESPACE=$(echo ${CI_JOB_NAME}-${CI_JOB_ID}-${CI_PIPELINE_ID} | tr _ -) # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character
    - ./eos-on-k8s/collect_logs.sh ${NAMESPACE} eos-logs/
    - ./eos-on-k8s/delete-all.sh ${NAMESPACE}
    - rm -rf eos-on-k8s/
    - docker images -q | xargs docker rmi || true # remove unused images


.k8s_system_test_script_template: &k8s_system_test_script_template
  <<: *k8s_before_script_template
  script:
    - if   [[ "$CI_JOB_NAME" == k8s_system ]]; then ./eos-on-k8s/create-all.sh -i ${IMAGE_TAG} -n ${NAMESPACE};
      elif [[ "$CI_JOB_NAME" == k8s_ubuntu_system ]]; then ./eos-on-k8s/create-all.sh -i ${IMAGE_TAG} -u ubuntu_bionic_client_${IMAGE_TAG} -n ${NAMESPACE} -q;
      elif [[ "$CI_JOB_NAME" == k8s_system_qdb* ]]; then ./eos-on-k8s/create-all.sh -i ${IMAGE_TAG} -n ${NAMESPACE} -q;
      else echo "CI_JOB_NAME:$CI_JOB_NAME not found"; exit 1;
      fi
    - if [[ "$CI_JOB_NAME" == k8s_system_qdb* ]]; then
        kubectl cp $NAMESPACE/$(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-cli1):/usr/sbin/eos-fsck-test ./eos-fsck-test;
        chmod +x eos-fsck-test; ./eos-fsck-test --type k8s $NAMESPACE ; rm -rf eos-fsck-test;
      fi
    - if [[ "$CI_JOB_NAME" == k8s_ubuntu_system ]]; then ./gitlab-ci/k8s_system_test_script.sh --only-client ${NAMESPACE};
      else ./gitlab-ci/k8s_system_test_script.sh ${NAMESPACE};
      fi
  <<: *k8s_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs/


.k8s_unit_test_template: &k8s_unit_test_template
  <<: *k8s_before_script_template
  script:
    - ./eos-on-k8s/create-mgm.sh -i ${IMAGE_TAG} -n ${NAMESPACE}
    - if [[ "$CI_JOB_NAME" =~ "asan" ]]; then export LSAN_OPTIONS="suppressions=/var/eos/test/LeakSanitizer.supp" ; else export LSAN_OPTIONS="" ; fi
    - kubectl exec -n $NAMESPACE -i $(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-mgm1) -- bash -c "LSAN_OPTIONS=${LSAN_OPTIONS} eos-unit-tests"
    - kubectl exec -n $NAMESPACE -i $(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-mgm1) -- bash -c "LSAN_OPTIONS=${LSAN_OPTIONS} eos-fst-unit-tests"
    - kubectl exec -n $NAMESPACE -i $(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-mgm1) -- bash -c "export LSAN_OPTIONS=${LSAN_OPTIONS}; eos-fusex-tests" # invoked command must contain a parent PID, hence the need for 2 commands to force a shell context
  <<: *k8s_after_script_template

.k8s_ns_unit_test_template: &k8s_ns_unit_test_template
  <<: *k8s_before_script_template
  script:
    - ./eos-on-k8s/create-mgm.sh -i ${IMAGE_TAG} -n ${NAMESPACE} -q
    - if [[ "$CI_JOB_NAME" =~ "asan" ]]; then export ASAN_OPTIONS="fast_unwind_on_malloc=0" ; else export ASAN_OPTIONS="" ; fi
    - kubectl exec -n $NAMESPACE -i $(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-mgm1) -- bash -c "ASAN_OPTIONS=${ASAN_OPTIONS} eos-ns-quarkdb-tests"
  <<: *k8s_after_script_template


#-------------------------------------------------------------------------------
# Build RPMs
#-------------------------------------------------------------------------------

build_cc7:
  <<: *cc7_template_definition
  variables:
    BUILD_NAME: cc7
  tags:
    - docker_node
    - cc7

clone_docker:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y git
    - git clone https://gitlab.cern.ch/eos/eos-docker.git
  artifacts:
    expire_in: 1 day
    paths:
      - eos-docker/
  tags:
    - docker_node


#-------------------------------------------------------------------------------
# Build docker images
#-------------------------------------------------------------------------------

cc7_docker_image_commit:
  stage: build:dockerimage
  tags:
    - docker-image-build
  script:
    - ""
  variables:
    TO: gitlab-registry.cern.ch/dss/eos:${CI_PIPELINE_ID}
    DOCKER_FILE: eos-docker/Dockerfile
  dependencies:
    - build_cc7
    - clone_docker
  only:
    - branches
  except:
    - beryl_aquamarine
    - tags

#-------------------------------------------------------------------------------
# Kubernetes testing framework
#-------------------------------------------------------------------------------

k8s_system:
  stage: test
  <<: *k8s_system_test_script_template
  tags:
    - shell-with-docker
    - k8s_node
  allow_failure: true
  retry: 1


k8s_system_qdb:
  stage: test
  <<: *k8s_system_test_script_template
  tags:
    - shell-with-docker
    - k8s_node
  allow_failure: true
  retry: 1


k8s_system_qdb_xt: # xt stands for xrd_testing. Must shorten to not hit HOST_NAME_MAX
  stage: test
  <<: *k8s_system_test_script_template
  variables:
    BASETAG: "xrd_testing_"
  tags:
    - shell-with-docker
    - k8s_node
  only:
    - schedules
  allow_failure: true
  retry: 1


k8s_ubuntu_system:
  stage: test
  <<: *k8s_system_test_script_template
  tags:
    - shell-with-docker
    - k8s_node
  only:
    - dev
    - master
    - tags
  allow_failure: true
  retry: 1


k8s_unit:
  stage: test
  <<: *k8s_unit_test_template
  tags:
    - shell-with-docker
    - k8s_node
  except:
    - schedules
  allow_failure: true


k8s_unit_asan:
  stage: test
  <<: *k8s_unit_test_template
  variables:
    BASETAG: "asan_"
  tags:
    - shell-with-docker
    - k8s_node
  only:
    - schedules
  allow_failure: true


k8s_ns_unit:
  stage: test
  <<: *k8s_ns_unit_test_template
  tags:
    - shell-with-docker
    - k8s_node
  except:
    - schedules
  allow_failure: true


k8s_ns_unit_asan:
  stage: test
  <<: *k8s_ns_unit_test_template
  variables:
    BASETAG: "asan_"
  tags:
    - shell-with-docker
    - k8s_node
  only:
    - schedules
  allow_failure: true


k8s_stress:
  stage: test
  <<: *k8s_before_script_template
  script:
    - ./eos-on-k8s/create-all.sh -i ${IMAGE_TAG} -n ${NAMESPACE}
    - kubectl exec -n $NAMESPACE -i $(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-mgm1) -- hammer-runner.py --strict-exit-code 1 --gitlab --url eos-mgm1.eos-mgm1.$NAMESPACE.svc.cluster.local//eos/dockertest/hammer/ --protocols xroot --threads 1 2 10 100 --operations write stat read delete --runs 3 --nfiles 10000
  <<: *k8s_after_script_template
  tags:
    - shell-with-docker
    - k8s_node
  allow_failure: true
  retry: 1


#-------------------------------------------------------------------------------
# RPM publishing
#-------------------------------------------------------------------------------


rpm_commit_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ $CI_COMMIT_TAG ]]; then echo "This only works for commits"; exit 0; else BUILD_TYPE="commit"; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts.sh ${BRANCH} ${BUILD_TYPE} /eos/project/s/storage-ci/www/eos
  tags:
    - docker_node
  except:
    - tags
  allow_failure: true
  when: manual


#-------------------------------------------------------------------------------
# RPM cleaning
#-------------------------------------------------------------------------------

clean_rpm_artifacts:
  stage: clean
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sssd-client sudo createrepo
    - sudo -u stci -H ./gitlab-ci/remove_old_artifacts.sh
  tags:
    - docker_node
  allow_failure: true
  only:
    - triggers
    - schedules

