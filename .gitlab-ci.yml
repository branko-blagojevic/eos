stages:
  - build:manual
  - build:rpm
  - build:dockerimage
  - publish
  - clean

default:
  before_script:
    - source gitlab-ci/export_branch.sh
    - echo "Exporting BRANCH=${BRANCH}"
    - source gitlab-ci/export_commit-type.sh
    - echo "Exporting COMMIT_TYPE=${COMMIT_TYPE}"

#-------------------------------------------------------------------------------
# Build RPMs
#-------------------------------------------------------------------------------

clone_docker:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y git
    - git clone https://gitlab.cern.ch/eos/eos-docker.git
  artifacts:
    expire_in: 1 day
    paths:
      - eos-docker/
  tags:
    - docker_node
    - clone_eosdocker

# schedules ------------------------------

.build_ubuntu-template: &build_ubuntu-template_definition
  stage: build:rpm
  script:
    - apt-get update -y; apt-get install -y git cmake g++ debhelper devscripts equivs gdebi-core ccache gawk
    # @todo re-enable building against latest XRootD master commit when CMake allows using XRootD plugin version 5 libraries
    #- echo -e '\ndeb http://storage-ci.web.cern.ch/storage-ci/debian/xrootd/ '${EOS_ARCH}' master' >> /etc/apt/sources.list
    - echo -e '\ndeb http://storage-ci.web.cern.ch/storage-ci/debian/xrootd/ '${EOS_ARCH}' release' >> /etc/apt/sources.list
    - wget -O - http://storage-ci.web.cern.ch/storage-ci/storageci.key 2>/dev/null | apt-key add -
    - apt-get update -y
    - git submodule update --init --recursive
    # @todo once the XRootD deb repos are better structured we can point to a
    # particular stable branch for the moment we force install the version we want
    - export XROOTD_VERSION=`grep "define xrootd_version_min" eos.spec.in | awk -F ':' '{print $2;}'`
    - apt-get install -y xrootd-server=${XROOTD_VERSION} xrootd-clients=${XROOTD_VERSION} libxrootd-dev=${XROOTD_VERSION} libxrootd-private-dev=${XROOTD_VERSION} libxrdapputils1=${XROOTD_VERSION} libxrdcrypto1=${XROOTD_VERSION} libxrdcryptolite1=${XROOTD_VERSION} libxrdxml2=${XROOTD_VERSION} libxrdutils2=${XROOTD_VERSION} libxrootd-server-dev=${XROOTD_VERSION} xrootd-client-libs=${XROOTD_VERSION} xrootd-server-libs=${XROOTD_VERSION} libxrdhttputils1=${XROOTD_VERSION} libxrdserver2=${XROOTD_VERSION} libxrdssilib1=${XROOTD_VERSION} libxrdssishmap1=${XROOTD_VERSION} libxrootd-client-dev=${XROOTD_VERSION} libxrdcl2=${XROOTD_VERSION} libxrdffs2=${XROOTD_VERSION} libxrdposix2=${XROOTD_VERSION} xrootd-client-plugins=${XROOTD_VERSION} xrootd-libs=${XROOTD_VERSION} xrootd-server-plugins=${XROOTD_VERSION} xrootd-plugins=${XROOTD_VERSION}
    - mk-build-deps --build-dep debian/control
    - gdebi -n eos-build-deps-depends*.deb
    - dch --create -v `./genversion.sh` --package eos --urgency low --distribution ${EOS_ARCH} -M "This package is built and released automatically. For important notices and releases subscribe to our mailing lists or visit our website."
    - if [[ -n "$CI_COMMIT_TAG" ]]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache_deb.sh; fi
    - dpkg-buildpackage -b -us -uc -tc --buildinfo-option="-udeb_packages" --changes-option="-udeb_packages"
    - ccache -s
    - mkdir ${EOS_ARCH}_artifacts/; cp deb_packages/*.deb ${EOS_ARCH}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - ${EOS_ARCH}_artifacts/
  dependencies: []
  allow_failure: true # @todo false for tags

build_ubuntu_bionic:
  image: ubuntu:bionic
  before_script:
    - apt-get update
    - apt-get install -y apt-transport-https ca-certificates gnupg software-properties-common wget
    - wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | apt-key add -
    - apt-add-repository 'deb https://apt.kitware.com/ubuntu/ '${EOS_ARCH}' main'
  <<: *build_ubuntu-template_definition
  variables:
    EOS_ARCH: bionic
  only:
    - schedules
    - tags
  tags:
    - docker_node
    - ubuntu


#-------------------------------------------------------------------------------
# Build docker images
#-------------------------------------------------------------------------------

.build_dockerimage-template: &build_dockerimage-template_definition
  stage: build:dockerimage
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - if [[ -n "$CI_COMMIT_TAG" ]];
      then export CACHE="false"; export IMAGE_TAG="$BASETAG$CI_COMMIT_TAG";
      else export CACHE="true"; export IMAGE_TAG="$BASETAG$CI_COMMIT_SHORT_SHA";
      fi
    - echo "$CACHE - $IMAGE_TAG"
    - export DESTINATION="gitlab-registry.cern.ch/dss/eos:${IMAGE_TAG}"
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --cache=$CACHE --destination $DESTINATION --dockerfile $DOCKERFILE --context $CI_PROJECT_DIR
  retry: 1

ubuntu_bionic_docker_image:
  <<: *build_dockerimage-template_definition
  variables:
    DOCKERFILE: eos-docker/Dockerfile_ubuntu_bionic
    BASETAG: "ubuntu_bionic_client_"
  dependencies:
    - build_ubuntu_bionic
    - clone_docker
  only:
    - schedules
    - tags
  allow_failure: true

#-------------------------------------------------------------------------------
# RPM publishing
#-------------------------------------------------------------------------------

debian_artifacts:
  stage: publish
  image: ubuntu:bionic
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd gpg
    - mkdir /home/stci
    - chown -R stci:def-cg /home/stci
    - chmod -R 700 /home/stci
    - if [[ -n "$CI_COMMIT_TAG" ]]; then sudo -u stci -H gpg --homedir /home/stci/ --import $STCI_REPO_KEY; fi
    - if [[ -n "$CI_COMMIT_TAG" ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts_debian.sh /eos/project/s/storage-ci/www/debian/eos/${BRANCH} ${BUILD_TYPE}
  dependencies:
    - build_ubuntu_bionic
  only:
    - tags
  retry: 2
  allow_failure: true
  tags:
    - docker_node
    - publish

.debian_artifacts_volume:
  stage: publish
  image: ubuntu:bionic
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd gpg
    - mkdir /home/stci
    - if [[ -n "$CI_COMMIT_TAG" ]]; then gpg --homedir /home/stci/ --import $STCI_REPO_KEY; fi
    - ./gitlab-ci/store_artifacts_debian.sh /mnt/eos_repositories/debian/eos/${BRANCH} tag
  dependencies:
    - build_ubuntu_bionic
  only:
    - tags
  except:
    - /.*xdc.*/
  tags:
    - docker_node
    - publish


#-------------------------------------------------------------------------------
# RPM cleaning
#-------------------------------------------------------------------------------

clean_debian_artifacts:
  stage: clean
  image: ubuntu:bionic
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd gpg
    - mkdir /home/stci
    - chown -R stci:def-cg /home/stci
    - chmod -R 700 /home/stci
    - if [[ -n "$CI_COMMIT_TAG" ]]; then sudo -u stci -H gpg --homedir /home/stci/ --import $STCI_REPO_KEY; fi
    - sudo -u stci -H ./gitlab-ci/remove_old_artifacts_debian.sh
  allow_failure: true
  only:
    - schedules
  tags:
    - docker_node
    - clean

clean_k8s_cluster:
  stage: clean
  script:
    - set +o pipefail
    - . /home/gitlab-runner/coe-cluster-config/st-gitlab-k8s-02/env_st-gitlab-k8s-02.sh # get access configs for the cluster
    - kubectl get pods --no-headers --all-namespaces | 
      grep -E 'ImagePullBackOff|ErrImagePull|Evicted' | 
      awk '{print $2 " --namespace=" $1}' | 
      xargs --no-run-if-empty -n2 kubectl delete pods
    - kubectl get namespaces --no-headers -o custom-columns=":metadata.name,:.metadata.creationTimestamp" | 
      grep -v 'default\|kube-public\|kube-system\|kube-node-lease' |
      awk '$2 <= "'$( date --utc -d "1 day ago" +"%Y-%m-%dT%H:%M:%SZ" )'" { print $1 }' |
      xargs --no-run-if-empty kubectl delete namespaces
  dependencies: []
  allow_failure: true
  only:
    - schedules
  tags:
    - shell-with-kubernetes


#-------------------------------------------------------------------------------
# Manually triggered builds
#-------------------------------------------------------------------------------

eos_nginx_slc6:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git tar sudo createrepo
    - cd nginx
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - groupadd --gid 2766 def-cg
    - useradd -u 102230 -g def-cg stci
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
    - slc6
  when: manual
  environment:
    name: nginx-slc6-prod

eos_nginx_cc7:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git sssd-client sudo createrepo
    - cd nginx
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
    - cc7
  when: manual
  environment:
    name: nginx-cc7-prod

eos_apmon_slc6:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git tar sudo createrepo
    - cd ApMon
    - ./maketar.sh
    - mkdir -p rpmbuild/{BUILD,BUILDROT,RPMS,SOURCES,SPECS,SRPMS}
    - cp eos-apmon-*.tar.gz rpmbuild/SOURCES
    - rpmbuild --define "_source_filedigest_algorithm md5" --define "_binary_filedigest_algorithm md5" --define "_topdir ./rpmbuild" -bs eos-apmon.spec
    - yum-builddep --nogpgcheck -y rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - rpmbuild --rebuild --define "_rpmdir rpmbuild/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - groupadd --gid 2766 def-cg
    - useradd -u 102230 -g def-cg stci
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/SRPM
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/SRPMS/*.src.rpm $STORAGE_PATH
  tags:
    - docker_node
    - slc6
  when: manual
  environment:
    name: apmon-slc6-prod

eos_apmon_cc7:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git sssd-client sudo createrepo
    - cd ApMon
    - ./maketar.sh
    - rpmbuild --define "_source_filedigest_algorithm md5" --define "_binary_filedigest_algorithm md5" --define "_topdir ./rpmbuild" -ts eos-apmon-*.tar.gz
    - yum-builddep --nogpgcheck -y rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - rpmbuild --rebuild --define "_rpmdir rpmbuild/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
    - cc7
  when: manual
  environment:
    name: apmon-cc7-prod

eos_microhttpd_slc6:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ make rpm-build which git tar sudo createrepo
    - cd microhttpd
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/x86_64
    - groupadd --gid 2766 def-cg
    - useradd -u 102230 -g def-cg stci
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
    - slc6
  when: manual

eos_microhttpd_cc7:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ make rpm-build which git sssd-client sudo createrepo
    - cd microhttpd
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
    - cc7
  when: manual

eos_docs:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y make python-sphinx sssd-client sudo which git
    - cd doc
    - export PYTHONPATH=`pwd`/_themes/
    - make html
    - sudo -u stci -H bash -c "rm -rf /eos/project/e/eos/www/docs/*"
    - sudo -u stci -H cp -R _build/html/* /eos/project/e/eos/www/docs/
  tags:
    - docker_node
  when: manual

eos_repopackage:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y rpm-build sssd-client sudo createrepo
    - mkdir build
    - cd build
    - rpmbuild --bb --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" ../elrepopackage.spec
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}/tag/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}/tag/el-6/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual
