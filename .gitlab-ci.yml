stages:
  - prebuild
  - build:rpm
  - build:dockerimage
  - test
  - coverage
  - publish
  - clean


before_script:
  - source gitlab-ci/export_branch.sh
  - echo "Exporting BRANCH=${BRANCH}"


eosci-base_docker_image_commit:
  stage: prebuild
  image:
    name: gitlab-registry.cern.ch/ci-tools/docker-image-builder
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR/gitlab-ci/eosci-base --dockerfile $CI_PROJECT_DIR/gitlab-ci/eosci-base/Dockerfile --destination gitlab-registry.cern.ch/dss/eos/eosci-base


#-------------------------------------------------------------------------------
# Build templates
#-------------------------------------------------------------------------------

.cc7_template: &cc7_template_definition
  stage: build:rpm
  image: gitlab-registry.cern.ch/dss/eos/eosci-base
  script:
    - git submodule update --init --recursive
    - mkdir build ; cd build/
    - cmake3 ../ -DPACKAGEONLY=1 ${CMAKE_OPTIONS}
    - make srpm
    - cd ../
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\npriority=2\n' >> /etc/yum.repos.d/eos-depend.repo
    - yum-builddep --nogpgcheck --setopt="cern*.exclude=xrootd*" -y build/SRPMS/*
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - if [ "$BUILD_TYPE" == "commit" ]; then source gitlab-ci/setup_ccache.sh; else export CCACHE_DISABLE=1; fi
    - rpmbuild --rebuild --with server ${RPMBUILD_OPTIONS} --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/*
    - ccache -s
    - if [ "$BUILD_TYPE" == "tag" ]; then gpg --allow-secret-key-import --import /keys/stci-debian-repo.sec; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir ${BUILD_NAME}_artifacts
    - cp -R build/SRPMS/ build/RPMS/ ${BUILD_NAME}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - ${BUILD_NAME}_artifacts/


#-------------------------------------------------------------------------------
# Test templates
#-------------------------------------------------------------------------------

.system_test_after_script_template: &system_test_after_script_template
  after_script:
    - ./eos-docker/scripts/collect_logs.sh eos-logs/
    - sudo ./eos-docker/scripts/shutdown_services.sh


.system_test_template: &system_test_template_definition
  script:
    - sudo ./eos-docker/scripts/shutdown_services.sh
    - ./eos-docker/scripts/remove_unused_images.sh
    - docker pull gitlab-registry.cern.ch/dss/${EOS_IMG_NAME}${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - if [[ "$CI_JOB_NAME" == system_test_qdb* ]]; then sudo ./eos-docker/scripts/start_services.sh -q -i gitlab-registry.cern.ch/dss/${EOS_IMG_NAME}${CI_COMMIT_TAG-$CI_PIPELINE_ID}; else sudo ./eos-docker/scripts/start_services.sh -i gitlab-registry.cern.ch/dss/${EOS_IMG_NAME}${CI_COMMIT_TAG-$CI_PIPELINE_ID}; fi
    - docker exec -i eos-cli1 git clone https://gitlab.cern.ch/dss/eosclient-tests.git
    - if [[ "$CI_JOB_NAME" == system_test_qdb* ]]; then docker cp eos-cli1:/usr/sbin/eos-fsck-test .; ./eos-fsck-test --type docker; rm -rf eos-fsck-test; fi
    - docker exec -i eos-mgm1 eos-instance-test-ci
    - docker exec -di eos-cli1 /bin/bash -c 'mkdir /eos1/; mount -t fuse eosxd -ofsname=mount-1 /eos1/'
    - docker exec -di eos-cli1 /bin/bash -c 'mkdir /eos2/; mount -t fuse eosxd -ofsname=mount-2 /eos2/'
    - docker exec -i -u eos-user eos-cli1 /bin/bash -c 'mkdir /eos1/dockertest/fusex_tests/; cd /eos1/dockertest/fusex_tests/; fusex-benchmark'
    # @todo(esindril): run "all" tests in schedule mode once these are properly supported
    # - if [ "$CI_PIPELINE_SOURCE" == "schedule" ]; then
    #     docker exec -i eos-mgm1 eos vid add gateway eos-cli1.eoscluster.cern.ch unix;
    #     docker exec -i eos-cli1 env EOS_FUSE_NO_ROOT_SQUASH=1 python /eosclient-tests/run.py --workdir="/eos1/dockertest /eos2/dockertest" ci;
    #   fi
    # until then just run the "ci" tests
    - docker exec -i eos-cli1 /bin/bash -c 'cd eosclient-tests &&  for n in prepare/*.sh; do /bin/bash $n prepare; done'
    - docker exec -i -u eos-user eos-cli1 python /eosclient-tests/run.py --workdir="/eos1/dockertest /eos2/dockertest" ci;
    - docker exec -i eos-cli1 /bin/bash -c 'cd eosclient-tests && for n in prepare/*.sh; do /bin/bash $n cleanup; done'
    # - docker exec -i eos-cli1 env EOS_MGM_URL=root://eos-mgm1.eoscluster.cern.ch eos fuse mount /eos_fuse
    # - docker exec -i eos-cli1 env EOS_MGM_URL=root://eos-mgm1.eoscluster.cern.ch eos fuse mount /eos_fuse2
    # - docker exec -i eos-cli1 python /eosclient-tests/run.py --workdir="/eos_fuse/dockertest /eos_fuse2/dockertest" ci
  <<: *system_test_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs/


.ubuntu_system_test_template: &ubuntu_system_test_template_definition
  script:
    - sudo ./eos-docker/scripts/shutdown_services.sh
    - ./eos-docker/scripts/remove_unused_images.sh
    - docker pull gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - docker pull gitlab-registry.cern.ch/dss/${UBUNTU_EOS_IMG_NAME}${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    # Run the following tests only on the NS in QuarkDB
    - sudo ./eos-docker/scripts/start_services.sh -q -i gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID} -u gitlab-registry.cern.ch/dss/${UBUNTU_EOS_IMG_NAME}${CI_COMMIT_TAG-$CI_PIPELINE_ID};
    - docker exec -i eos-cli1 git clone https://gitlab.cern.ch/dss/eosclient-tests.git
    - docker exec -di eos-cli1 /bin/bash -c 'mkdir /eos1/; mount -t fuse eosxd -ofsname=mount-1 /eos1/'
    - docker exec -di eos-cli1 /bin/bash -c 'mkdir /eos2/; mount -t fuse eosxd -ofsname=mount-2 /eos2/'
    - docker exec -i -u eos-user eos-cli1 /bin/bash -c 'mkdir /eos1/dockertest/fusex_tests/; cd /eos1/dockertest/fusex_tests/; fusex-benchmark'
    # @todo(esindril): run "all" tests in schedule mode once these are properly supported
    # - if [ "$CI_PIPELINE_SOURCE" == "schedule" ]; then
    #     docker exec -i eos-mgm1 eos vid add gateway eos-cli1.eoscluster.cern.ch unix;
    #     docker exec -i eos-cli1 env EOS_FUSE_NO_ROOT_SQUASH=1 python /eosclient-tests/run.py --workdir="/eos1/dockertest /eos2/dockertest" ci;
    #   fi
    # until then just run the "ci" tests
    - docker exec -i -u eos-user eos-cli1 python /eosclient-tests/run.py --workdir="/eos1/dockertest /eos2/dockertest" ci;
  <<: *system_test_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs/


.unit_test_template: &unit_test_template
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y yum-plugin-priorities createrepo
    - createrepo ${BUILD_NAME}_artifacts/
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\npriority=2\n' >> /etc/yum.repos.d/eos-depend.repo
    - echo -e '[eos-artifacts]\nname=EOS artifacts\nbaseurl=file://'${PWD}'/'${BUILD_NAME}'_artifacts\ngpgcheck=0\nenabled=1\npriority=1' >> /etc/yum.repos.d/eos-artifacts.repo
    - yum install --nogpg --disablerepo="cern*" -y eos-client eos-server eos-test
    - eos-unit-tests
    - eos-fst-unit-tests
    - eos-fusex-tests
  variables:
    BUILD_NAME: cc7


.namespace_unit_test_template: &namespace_unit_test_template
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y yum-plugin-priorities createrepo
    - createrepo ${BUILD_NAME}_artifacts/
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\npriority=2\n' >> /etc/yum.repos.d/eos-depend.repo
    - echo -e '[eos-artifacts]\nname=EOS artifacts\nbaseurl=file://'${PWD}'/'${BUILD_NAME}'_artifacts\ngpgcheck=0\nenabled=1\npriority=1' >> /etc/yum.repos.d/eos-artifacts.repo
    - echo -e '[quarkdb]\nname=QuarkDB\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/quarkdb/tag/el7/x86_64/\ngpgcheck=0\nenabled=1\npriority=4\n' >> /etc/yum.repos.d/quarkdb.repo
    - yum install --nogpg -y --disablerepo="cern*" eos-client eos-server eos-test quarkdb
    - export EOS_QUARKDB_HOSTPORT=localhost:9999
    - export EOS_QUARKDB_PASSWD=password_must_be_atleast_32_characters
    - quarkdb-create --path /var/lib/quarkdb/node-1 --clusterID ns-test --nodes $EOS_QUARKDB_HOSTPORT
    - mkdir /var/log/quarkdb
    - chown -R daemon:daemon /var/lib/quarkdb /var/log/quarkdb
    - echo redis.password $EOS_QUARKDB_PASSWD >> /etc/xrd.cf.quarkdb
    - (xrootd -c /etc/xrd.cf.quarkdb -l /var/log/quarkdb/xrdlog.quarkdb -Rdaemon &) ; sleep 3
    - eos-ns-quarkdb-tests
  variables:
    BUILD_NAME: cc7


#-------------------------------------------------------------------------------
# Kubernetes templates
#-------------------------------------------------------------------------------

.k8s_before_script_template: &k8s_before_script_template
  before_script:
    - . /home/gitlab-runner/coe-cluster-config/st-gitlab-k8s-02/env_st-gitlab-k8s-02.sh # get access configs for the cluster
    - NAMESPACE=$(echo ${CI_JOB_NAME}-${CI_JOB_ID}-${CI_PIPELINE_ID} | tr _ -)
    - if [[ "$CI_COMMIT_TAG" != "" ]]; then
        IMAGE_TAG="${BASETAG}${CI_COMMIT_TAG}";
      else
        IMAGE_TAG="${BASETAG}${CI_PIPELINE_ID}";
      fi;
    - git clone https://gitlab.cern.ch/eos/eos-on-k8s.git


.k8s_after_script_template: &k8s_after_script_template
  after_script:
    - . /home/gitlab-runner/coe-cluster-config/st-gitlab-k8s-02/env_st-gitlab-k8s-02.sh # get access configs for the cluster
    - NAMESPACE=$(echo ${CI_JOB_NAME}-${CI_JOB_ID}-${CI_PIPELINE_ID} | tr _ -) # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character
    - ./eos-on-k8s/collect_logs.sh ${NAMESPACE} eos-logs/
    - ./eos-on-k8s/delete-all.sh ${NAMESPACE}
    - rm -rf eos-on-k8s/
    - docker images -q | xargs docker rmi || true # remove unused images


.k8s_system_test_script_template: &k8s_system_test_script_template
  <<: *k8s_before_script_template
  script:
    - if   [[ "$CI_JOB_NAME" == k8s_system ]]; then ./eos-on-k8s/create-all.sh -i ${IMAGE_TAG} -n ${NAMESPACE};
      elif [[ "$CI_JOB_NAME" == k8s_ubuntu_system ]]; then ./eos-on-k8s/create-all.sh -i ${IMAGE_TAG} -u ubuntu_bionic_client_${IMAGE_TAG} -n ${NAMESPACE} -q;
      elif [[ "$CI_JOB_NAME" == k8s_system_qdb* ]]; then ./eos-on-k8s/create-all.sh -i ${IMAGE_TAG} -n ${NAMESPACE} -q;
      else echo "CI_JOB_NAME:$CI_JOB_NAME not found"; exit 1;
      fi
    - if [[ "$CI_JOB_NAME" == k8s_system_qdb* ]]; then
        kubectl cp $NAMESPACE/$(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-cli1):/usr/sbin/eos-fsck-test ./eos-fsck-test;
        chmod +x eos-fsck-test; ./eos-fsck-test --type k8s $NAMESPACE ; rm -rf eos-fsck-test;
      fi
    - if [[ "$CI_JOB_NAME" == k8s_ubuntu_system ]]; then ./gitlab-ci/k8s_system_test_script.sh --only-client ${NAMESPACE};
      else ./gitlab-ci/k8s_system_test_script.sh ${NAMESPACE};
      fi
  <<: *k8s_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs/


.k8s_unit_test_template: &k8s_unit_test_template
  <<: *k8s_before_script_template
  script:
    - ./eos-on-k8s/create-mgm.sh -i ${IMAGE_TAG} -n ${NAMESPACE}
    - if [[ "$CI_JOB_NAME" =~ "asan" ]]; then export LSAN_OPTIONS="suppressions=/var/eos/test/LeakSanitizer.supp" ; else export LSAN_OPTIONS="" ; fi
    - kubectl exec -n $NAMESPACE -i $(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-mgm1) -- bash -c "LSAN_OPTIONS=${LSAN_OPTIONS} eos-unit-tests"
    - kubectl exec -n $NAMESPACE -i $(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-mgm1) -- bash -c "LSAN_OPTIONS=${LSAN_OPTIONS} eos-fst-unit-tests"
    - kubectl exec -n $NAMESPACE -i $(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-mgm1) -- bash -c "export LSAN_OPTIONS=${LSAN_OPTIONS}; eos-fusex-tests" # invoked command must contain a parent PID, hence the need for 2 commands to force a shell context
  <<: *k8s_after_script_template

.k8s_ns_unit_test_template: &k8s_ns_unit_test_template
  <<: *k8s_before_script_template
  script:
    - ./eos-on-k8s/create-mgm.sh -i ${IMAGE_TAG} -n ${NAMESPACE} -q
    - if [[ "$CI_JOB_NAME" =~ "asan" ]]; then export ASAN_OPTIONS="fast_unwind_on_malloc=0" ; else export ASAN_OPTIONS="" ; fi
    - kubectl exec -n $NAMESPACE -i $(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-mgm1) -- bash -c "ASAN_OPTIONS=${ASAN_OPTIONS} eos-ns-quarkdb-tests"
  <<: *k8s_after_script_template


#-------------------------------------------------------------------------------
# Build RPMs
#-------------------------------------------------------------------------------

build_cc7:
  <<: *cc7_template_definition
  variables:
    BUILD_NAME: cc7
  tags:
    - docker_node
    - cc7

clone_docker:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y git
    - git clone https://gitlab.cern.ch/eos/eos-docker.git
  artifacts:
    expire_in: 1 day
    paths:
      - eos-docker/
  tags:
    - docker_node


#-------------------------------------------------------------------------------
# Build docker images
#-------------------------------------------------------------------------------

cc7_docker_image_commit:
  stage: build:dockerimage
  tags:
    - docker-image-build
  script:
    - ""
  variables:
    TO: gitlab-registry.cern.ch/dss/eos:${CI_PIPELINE_ID}
    DOCKER_FILE: eos-docker/Dockerfile
  dependencies:
    - build_cc7
    - clone_docker
  only:
    - branches
  except:
    - beryl_aquamarine
    - tags

#-------------------------------------------------------------------------------
# Kubernetes testing framework
#-------------------------------------------------------------------------------

k8s_system:
  stage: test
  <<: *k8s_system_test_script_template
  tags:
    - shell-with-docker
    - k8s_node
  allow_failure: true
  retry: 1


k8s_system_qdb:
  stage: test
  <<: *k8s_system_test_script_template
  tags:
    - shell-with-docker
    - k8s_node
  allow_failure: true
  retry: 1


k8s_system_qdb_xt: # xt stands for xrd_testing. Must shorten to not hit HOST_NAME_MAX
  stage: test
  <<: *k8s_system_test_script_template
  variables:
    BASETAG: "xrd_testing_"
  tags:
    - shell-with-docker
    - k8s_node
  only:
    - schedules
  allow_failure: true
  retry: 1


k8s_ubuntu_system:
  stage: test
  <<: *k8s_system_test_script_template
  tags:
    - shell-with-docker
    - k8s_node
  only:
    - dev
    - master
    - tags
  allow_failure: true
  retry: 1


k8s_unit:
  stage: test
  <<: *k8s_unit_test_template
  tags:
    - shell-with-docker
    - k8s_node
  except:
    - schedules
  allow_failure: true


k8s_unit_asan:
  stage: test
  <<: *k8s_unit_test_template
  variables:
    BASETAG: "asan_"
  tags:
    - shell-with-docker
    - k8s_node
  only:
    - schedules
  allow_failure: true


k8s_ns_unit:
  stage: test
  <<: *k8s_ns_unit_test_template
  tags:
    - shell-with-docker
    - k8s_node
  except:
    - schedules
  allow_failure: true


k8s_ns_unit_asan:
  stage: test
  <<: *k8s_ns_unit_test_template
  variables:
    BASETAG: "asan_"
  tags:
    - shell-with-docker
    - k8s_node
  only:
    - schedules
  allow_failure: true


k8s_stress:
  stage: test
  <<: *k8s_before_script_template
  script:
    - ./eos-on-k8s/create-all.sh -i ${IMAGE_TAG} -n ${NAMESPACE}
    - kubectl exec -n $NAMESPACE -i $(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-mgm1) -- hammer-runner.py --strict-exit-code 1 --gitlab --url eos-mgm1.eos-mgm1.$NAMESPACE.svc.cluster.local//eos/dockertest/hammer/ --protocols xroot --threads 1 2 10 100 --operations write stat read delete --runs 3 --nfiles 10000
  <<: *k8s_after_script_template
  tags:
    - shell-with-docker
    - k8s_node
  allow_failure: true
  retry: 1


#-------------------------------------------------------------------------------
# Testing framework
#-------------------------------------------------------------------------------

system_test:
  stage: test
  <<: *system_test_template_definition
  variables:
    EOS_IMG_NAME: "eos:"
  tags:
    - shell-with-docker
  dependencies:
    - clone_docker
  allow_failure: true
  retry: 1


system_test_qdb:
  stage: test
  <<: *system_test_template_definition
  variables:
    EOS_IMG_NAME: "eos:"
  tags:
    - shell-with-docker
  dependencies:
    - clone_docker
  allow_failure: true
  retry: 1


system_test_qdb_xrd_testing:
  stage: test
  <<: *system_test_template_definition
  variables:
    EOS_IMG_NAME: "eos:xrd_testing_"
  tags:
    - shell-with-docker
  dependencies:
    - clone_docker
  only:
    - schedules
  allow_failure: true
  retry: 1


ubuntu_system_test:
  stage: test
  <<: *ubuntu_system_test_template_definition
  variables:
    UBUNTU_EOS_IMG_NAME: "eos:ubuntu_bionic_client_"
  tags:
    - shell-with-docker
  dependencies:
    - clone_docker
  only:
    - dev
    - master
    - tags
  allow_failure: true
  retry: 1


.ubuntu_disco_system_test:
  stage: test
  <<: *ubuntu_system_test_template_definition
  variables:
    UBUNTU_EOS_IMG_NAME: "eos:ubuntu_disco_client_"
  tags:
    - shell-with-docker
  dependencies:
    - clone_docker
  only:
    - schedules
    - tags
  allow_failure: true
  retry: 1


unit_test:
  stage: test
  <<: *unit_test_template
  dependencies:
    - build_cc7
  tags:
    - docker_node
  except:
    - schedules


namespace_unit_test:
  stage: test
  <<: *namespace_unit_test_template
  dependencies:
    - build_cc7
  tags:
    - docker_node
  except:
    - schedules


stress_test:
  stage: test
  script:
    - sudo ./eos-docker/scripts/shutdown_services.sh
    - ./eos-docker/scripts/remove_unused_images.sh
    - docker pull gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - sudo ./eos-docker/scripts/start_services.sh -i gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - docker exec -i eos-mgm1 hammer-runner.py --strict-exit-code 1 --gitlab --url eos-mgm1.eoscluster.cern.ch//eos/dockertest/hammer/ --protocols xroot --threads 1 2 10 100 --operations write stat read delete --runs 3 --nfiles 10000
    - sudo ./eos-docker/scripts/shutdown_services.sh
  tags:
    - shell-with-docker
  dependencies:
    - clone_docker
  allow_failure: true
  retry: 1


#-------------------------------------------------------------------------------
# RPM publishing
#-------------------------------------------------------------------------------

publish_koji_cc7:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sssd-client
    - yum install -y koji
    - mkdir ~/.koji
    - echo -e '[koji]\nserver = https://kojihub.cern.ch/kojihub\nweburl = https://koji.cern.ch/\ntopurl = https://koji.cern.ch/kojifiles\nkrb_canon_host = no\nkrb_rdns = False\n' >> ~/.koji/config
    - kinit stci@CERN.CH -k -t /stci.krb5/stci.keytab
    - koji build eos7 cc7_artifacts/SRPMS/*.src.rpm
  tags:
    - docker_node
  dependencies:
    - build_cc7
  only:
    - tags


rpm_commit_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ $CI_COMMIT_TAG ]]; then echo "This only works for commits"; exit 0; else BUILD_TYPE="commit"; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts.sh ${BRANCH} ${BUILD_TYPE} /eos/project/s/storage-ci/www/eos
  tags:
    - docker_node
  except:
    - tags
  allow_failure: true
  when: manual


rpm_testing_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE="tag/testing"; else BUILD_TYPE="commit"; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts.sh ${BRANCH} ${BUILD_TYPE} /eos/project/s/storage-ci/www/eos
  tags:
    - docker_node
  only:
    - master
    - dev
    - tags
  retry: 2


rpm_stable_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE="tag"; else echo "This only works for tags"; exit 0; fi
    - ./gitlab-ci/store_artifacts.sh ${BRANCH} ${BUILD_TYPE} /mnt/eos_repositories/eos
    - sudo -u stci -H ./gitlab-ci/store_stable_artifacts.sh ${BRANCH} /eos/project/s/storage-ci/www/eos ${CI_COMMIT_TAG}
    - echo ${CI_COMMIT_TAG} | sudo -u stci tee /eos/project/s/storage-ci/www/eos/${BRANCH}/tag/latest_version
  tags:
    - docker_node
  only:
    - tags
  dependencies: []
  when: manual


#-------------------------------------------------------------------------------
# RPM cleaning
#-------------------------------------------------------------------------------

clean_rpm_artifacts:
  stage: clean
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sssd-client sudo createrepo
    - sudo -u stci -H ./gitlab-ci/remove_old_artifacts.sh
  tags:
    - docker_node
  allow_failure: true
  only:
    - triggers
    - schedules


clean_debian_artifacts:
  stage: clean
  image: ubuntu:bionic
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd gpg
    - mkdir /home/stci
    - chown -R stci:def-cg /home/stci
    - chmod -R 700 /home/stci
    - sudo -u stci -H gpg --homedir /home/stci/ --allow-secret-key-import --import /keys/stci-debian-repo.sec
    - sudo -u stci -H ./gitlab-ci/remove_old_artifacts_debian.sh
  tags:
    - docker_node
  allow_failure: true
  only:
    - schedules


clean_k8s_cluster:
  stage: clean
  script:
    - set +o pipefail
    - . /home/gitlab-runner/coe-cluster-config/st-gitlab-k8s-02/env_st-gitlab-k8s-02.sh # get access configs for the cluster
    - kubectl get pods --no-headers --all-namespaces | 
      grep -E 'ImagePullBackOff|ErrImagePull|Evicted' | 
      awk '{print $2 " --namespace=" $1}' | 
      xargs --no-run-if-empty -n2 kubectl delete pods
    - kubectl get namespaces --no-headers -o custom-columns=":metadata.name,:.metadata.creationTimestamp" | 
      grep -v 'default\|kube-public\|kube-system' | 
      awk '$2 <= "'$( date --utc -d "3 days ago" +"%Y-%m-%dT%H:%M:%SZ" )'" { print $1 }' | 
      xargs --no-run-if-empty kubectl delete namespaces
  dependencies: []
  tags:
    - shell-with-docker
    - k8s_node
  allow_failure: true
  only:
    - schedules

#-------------------------------------------------------------------------------
# Manually triggered builds
#-------------------------------------------------------------------------------

eos_nginx_slc6:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git tar sudo createrepo
    - cd nginx
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - groupadd --gid 2766 def-cg
    - useradd -u 102230 -g def-cg stci
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
    - slc6
  when: manual
  environment:
    name: nginx-slc6-prod


eos_nginx_cc7:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git sssd-client sudo createrepo
    - cd nginx
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual
  environment:
    name: nginx-cc7-prod


eos_apmon_slc6:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git tar sudo createrepo
    - cd ApMon
    - ./maketar.sh
    - mkdir -p rpmbuild/{BUILD,BUILDROT,RPMS,SOURCES,SPECS,SRPMS}
    - cp eos-apmon-*.tar.gz rpmbuild/SOURCES
    - rpmbuild --define "_source_filedigest_algorithm md5" --define "_binary_filedigest_algorithm md5" --define "_topdir ./rpmbuild" -bs eos-apmon.spec
    - yum-builddep --nogpgcheck -y rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - rpmbuild --rebuild --define "_rpmdir rpmbuild/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - groupadd --gid 2766 def-cg
    - useradd -u 102230 -g def-cg stci
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/SRPM
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/SRPMS/*.src.rpm $STORAGE_PATH
  tags:
    - docker_node
    - slc6
  when: manual
  environment:
    name: apmon-slc6-prod


eos_apmon_cc7:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git sssd-client sudo createrepo
    - cd ApMon
    - ./maketar.sh
    - rpmbuild --define "_source_filedigest_algorithm md5" --define "_binary_filedigest_algorithm md5" --define "_topdir ./rpmbuild" -ts eos-apmon-*.tar.gz
    - yum-builddep --nogpgcheck -y rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - rpmbuild --rebuild --define "_rpmdir rpmbuild/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual
  environment:
    name: apmon-cc7-prod


eos_microhttpd_slc6:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ make rpm-build which git tar sudo createrepo
    - cd microhttpd
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/x86_64
    - groupadd --gid 2766 def-cg
    - useradd -u 102230 -g def-cg stci
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
    - fedora_rawhide
  when: manual


eos_microhttpd_cc7:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ make rpm-build which git sssd-client sudo createrepo
    - cd microhttpd
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual


eos_docs:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y make python-sphinx sssd-client sudo which git
    - cd doc
    - export PYTHONPATH=`pwd`/_themes/
    - make html
    - sudo -u stci -H bash -c "rm -rf /eos/project/e/eos/www/docs/*"
    - sudo -u stci -H cp -R _build/html/* /eos/project/e/eos/www/docs/
  tags:
    - docker_node
  when: manual


eos_repopackage:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y rpm-build sssd-client sudo createrepo
    - mkdir build
    - cd build
    - rpmbuild --bb --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" ../elrepopackage.spec
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}/tag/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}/tag/el-6/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual


coverage_report:
  stage: coverage
  script:
    - sudo ./eos-docker/scripts/shutdown_services.sh
    - ./eos-docker/scripts/remove_unused_images.sh
    - docker pull gitlab-registry.cern.ch/dss/${EOS_IMG_NAME}${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - sudo ./eos-docker/scripts/start_services.sh -i gitlab-registry.cern.ch/dss/${EOS_IMG_NAME}${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - ./eos-docker/coverage/eos-coverage-ci.sh
    - sudo -u stci cp -r ./eos-coverage/ /eos/project/s/storage-ci/www/eos-coverage-report/eos-coverage-${CI_COMMIT_TAG-$CI_PIPELINE_ID}/
    - sudo ./eos-docker/scripts/shutdown_services.sh
  variables:
    EOS_IMG_NAME: "eos:coverage_"
  tags:
    - shell-with-docker
  dependencies:
    - clone_docker
  only:
    variables:
      - $COVERAGE_SCHEDULE


periodic_coverity:
  stage: build:rpm
  script:
    - rm -f CMakeCache.txt
    - git submodule update --init --recursive; mkdir build; cd build; scl enable "cmake3 .. -DPACKAGEONLY=1"; make srpm
    - sudo yum-builddep --nogpgcheck -y --setopt="cern*.exclude=xrootd*" --setopt="eos-depend.exclude=protobuf3*" SRPMS/*
    - rm -rf ./*; scl enable devtoolset-6 "cmake3 .."
    - cov-build --dir cov-int make -j 4
    - tar czvf eos-metrics.tgz cov-int
    - curl --form token="`cat /home/gitlab-runner/.coverity_token`" --form email=project-eos-commits@cern.ch --form file=@eos-metrics.tgz --form version="`../genversion.sh`" --form description="Periodic Gitlab build" https://scan.coverity.com/builds?project=cern-eos%2Feos
  tags:
    - coverity
  allow_failure: true
  when: manual


cppcheck_sonar:
  stage: build:rpm
  script:
    - rm -f CMakeCache.txt
    - git submodule update --init --recursive; mkdir build; cd build; scl enable "cmake3 .. -DPACKAGEONLY=1"; make srpm; cd ..;
    - sudo yum-builddep --nogpgcheck -y --setopt="cern*.exclude=xrootd*" --setopt="eos-depend.exclude=protobuf3*" build/SRPMS/*
    - cppcheck -j 4 -v --enable=all --inline-suppr --xml --xml-version=2 -i common/fmt -i fst/layout/gf-complete -i fst/layout/jerasure -i common/sqlite -i namespace/ns_quarkdb/qclient common/ fst/ mgm/ console/ fuse/ fusex/ namespace/ mq/ 2> cppcheck-report.xml
    - sonar-scanner -Dsonar.cxx.cppcheck.reportPath=cppcheck-report.xml -Dsonar.projectVersion="`./genversion.sh`" -Dsonar.sources=common/,fst/,mgm/,console/,fuse/,namespace/,mq/
  tags:
    - coverity
  allow_failure: true
  when: manual
