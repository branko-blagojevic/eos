stages:
  - build:manual
  - build:rpm
  - build:dockerimage
  - test
  - publish
  - clean

default:
  before_script:
    # @note BRANCH="citrine-no_sse" in publish stage, "citrine" otherwise
    - source gitlab-ci/export_branch.sh
    - echo "Exporting BRANCH=${BRANCH}"
    - source gitlab-ci/export_commit-type.sh
    - echo "Exporting COMMIT_TYPE=${COMMIT_TYPE}"

#-------------------------------------------------------------------------------
# Build RPMs
#-------------------------------------------------------------------------------

build_cc7_no_sse:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y ccache cmake3 gcc-c++ git make rpm-build rpm-sign centos-release-scl tar which yum-plugin-priorities
    - git submodule update --init --recursive
    - mkdir build
    - cd build/
    - cmake3 ../ -DPACKAGEONLY=1 ${CMAKE_OPTIONS}
    - make srpm
    - cd ../
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\npriority=2\n' >> /etc/yum.repos.d/eos-depend.repo
    - yum-builddep --nogpgcheck --setopt="cern*.exclude=xrootd*" -y build/SRPMS/*
    - if [ "$COMMIT_TYPE" == "tag" ]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache.sh; fi
    - rpmbuild --rebuild --with server ${RPMBUILD_OPTIONS} --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/*
    - ccache -s
    - if [ "$COMMIT_TYPE" == "tag" ]; then gpg --allow-secret-key-import --import /keys/stci-debian-repo.sec; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir ${BUILD_NAME}_artifacts; cp -R build/SRPMS/ build/RPMS/ ${BUILD_NAME}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - ${BUILD_NAME}_artifacts/
  dependencies: []
  allow_failure: true
  variables:
    BUILD_NAME: "cc7_no_sse"
    CMAKE_OPTIONS: "-DNO_SSE=1"
    RPMBUILD_OPTIONS: "--with no_sse"
  tags:
    - docker_node
    - cc7

clone_docker:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y git
    - git clone https://gitlab.cern.ch/eos/eos-docker.git
  artifacts:
    expire_in: 1 day
    paths:
      - eos-docker/
  tags:
    - docker_node
    - clone_eosdocker

# keep just as a reference
.build_cc7:
  stage: build:rpm
  image: gitlab-registry.cern.ch/dss/eos/prebuild-cc7
  script:
    - git submodule update --init --recursive
    - mkdir build
    - cd build/
    - cmake3 ../ -DPACKAGEONLY=1
    - make srpm
    - cd ../
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\npriority=2\n' >> /etc/yum.repos.d/eos-depend.repo
    - yum-builddep --nogpgcheck --setopt="cern*.exclude=xrootd*" -y build/SRPMS/*
    - if [ "$COMMIT_TYPE" == "tag" ]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache.sh; fi
    - rpmbuild --rebuild --with server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/* | ts
    - ccache -s
    - if [ "$COMMIT_TYPE" == "tag" ]; then gpg --allow-secret-key-import --import /keys/stci-debian-repo.sec; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir cc7_artifacts; cp -R build/SRPMS/ build/RPMS/ cc7_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - cc7_artifacts/
  tags:
    - docker_node
    - cc7


#-------------------------------------------------------------------------------
# Build docker images
#-------------------------------------------------------------------------------

.build_dockerimage-template: &build_dockerimage-template_definition
  stage: build:dockerimage
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - if [[ -n "$CI_COMMIT_TAG" ]];
      then export CACHE="false"; export IMAGE_TAG="$BASETAG$CI_COMMIT_TAG";
      else export CACHE="true"; export IMAGE_TAG="$BASETAG$CI_COMMIT_SHORT_SHA";
      fi
    - echo "$CACHE - $IMAGE_TAG"
    - export DESTINATION="gitlab-registry.cern.ch/dss/eos:${IMAGE_TAG}"
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --cache=$CACHE --destination $DESTINATION --dockerfile $DOCKERFILE --context $CI_PROJECT_DIR
  retry: 1

cc7_no_sse_docker_image:
  <<: *build_dockerimage-template_definition
  variables:
    DOCKERFILE: eos-docker/Dockerfile_no_sse
    BASETAG: "no_sse_"
  dependencies:
    - build_cc7_no_sse
    - clone_docker

#-------------------------------------------------------------------------------
# Dock8rnetes testing framework (exec_cmd wraps both docker and k8s!)
#-------------------------------------------------------------------------------

.dock8s_before_script_template: &dock8s_before_script_template
  before_script:
    - export BASETAG="no_sse_"
    - if [[ $CI_JOB_NAME =~ "k8s" ]]; then
        source ./gitlab-ci/before_script_k8s_test.sh;
        source ./gitlab-ci/utilities_func_for_tests.sh --type k8s $K8S_NAMESPACE;
      elif [[ $CI_JOB_NAME =~ "dock" ]]; then
        source ./gitlab-ci/before_script_docker_test.sh;
        source ./gitlab-ci/utilities_func_for_tests.sh --type docker;
      fi

.dock8s_after_script_template: &dock8s_after_script_template
  after_script:
    - if [[ $CI_JOB_NAME =~ "k8s" ]]; then
        ./gitlab-ci/after_script_k8s_test.sh;
      elif [[ $CI_JOB_NAME =~ "dock" ]]; then
        ./gitlab-ci/after_script_docker_test.sh;
      fi

.dock8s_system_test_template: &dock8s_system_test_template
  stage: test
  <<: *dock8s_before_script_template
  script:
    - if [[ $CI_JOB_NAME =~ "k8s" ]]; then
        kubectl cp $K8S_NAMESPACE/$(get_podname eos-cli1):/usr/sbin/eos-fsck-test ./eos-fsck-test;
        chmod +x eos-fsck-test; date; ./eos-fsck-test --type k8s $K8S_NAMESPACE; date; rm -rf eos-fsck-test;
      elif [[ $CI_JOB_NAME =~ "dock" ]]; then
        docker cp eos-cli1:/usr/sbin/eos-fsck-test .;
        chmod +x eos-fsck-test; date; ./eos-fsck-test --type docker; date; rm -rf eos-fsck-test;
      fi
    - date
    - exec_cmd eos-mgm1 'eos ns mutex --toggleorder'
    - exec_cmd eos-mgm1 eos-instance-test-ci
    - exec_cmd eos-mgm1 'grep "RWMutex. Order Checking Error in thread" /var/log/eos/mgm/xrdlog.mgm && exit 1 || exit 0'
    - date
  <<: *dock8s_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/

.dock8s_fusex_test_template: &dock8s_fusex_test_template
  stage: test
  <<: *dock8s_before_script_template
  script:
    # prepare mountpoints
    - exec_cmd eos-cli1 'atd; at now <<< "mkdir -p /eos1/ && mount -t fuse eosxd -ofsname=mount-1 /eos1/; mkdir -p /eos2/ && mount -t fuse eosxd -ofsname=mount-2 /eos2/;"'
    - exec_cmd eos-cli1 'count=0; while [[ $count -le 10 ]] && ( [[ ! -d /eos1/dockertest/ ]] || [[ ! -d /eos2/dockertest/ ]] ); do echo "Wait for mount... $count"; (( count++ )); sleep 1; done;'
    # fusex benchmark
    - exec_cmd eos-mgm1 'eos ns mutex --toggleorder'
    - exec_cmd eos-cli1 "su eos-user -c 'mkdir /eos1/dockertest/fusex_tests/; cd /eos1/dockertest/fusex_tests/; fusex-benchmark'"
    - exec_cmd eos-mgm1 'grep "RWMutex. Order Checking Error in thread" /var/log/eos/mgm/xrdlog.mgm && exit 1 || exit 0'
    # download tests repo
    - exec_cmd eos-cli1 'git clone https://gitlab.cern.ch/dss/eosclient-tests.git'
    # ubuntu releases do not support 'clone' yet
    # @note tmp force successful exit
    - if [[ ! $CI_JOB_NAME =~ "ubuntu" ]]; then
        exec_cmd eos-cli1 'cd /eosclient-tests; git checkout rtb_clone; prepare/clone_test.sh prepare; rc=$?; git checkout master; echo $rc; exit 0';
      fi
    # @todo(esindril): run "all" tests in schedule mode once these are properly supported
    # if [ "$CI_PIPELINE_SOURCE" == "schedule" ];
    # then
    #   exec_cmd eos-mgm1 'eos vid add gateway "eos-cli1.eos-cli1.${K8S_NAMESPACE}.svc.cluster.local" unix';
    #   exec_cmd eos-cli1 'env EOS_FUSE_NO_ROOT_SQUASH=1 python /eosclient-tests/run.py --workdir="/eos1/dockertest /eos2/dockertest" ci';
    # fi
    # until then just run the "ci" tests
    - exec_cmd eos-cli1 'cd eosclient-tests; for n in prepare/*.sh; do /bin/bash $n prepare; done '
    - exec_cmd eos-cli1 'su eos-user -c "python2 /eosclient-tests/run.py --workdir=\"/eos1/dockertest /eos2/dockertest\" ci"'
    - exec_cmd eos-cli1 ' cd eosclient-tests;  for n in prepare/*.sh; do /bin/bash $n cleanup; done '
  <<: *dock8s_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/

.dock8s_cbox_test_template: &dock8s_cbox_test_template
  stage: test
  <<: *dock8s_before_script_template
  script:
    # enable converter and prepare eoshome folder, cernbox alike
    - exec_cmd eos-mgm1 'eos space config default space.converter=on'
    - exec_cmd eos-mgm1 './eos_create_userhome.sh eos-user'
    # prepare mountpoints
    - exec_cmd eos-cli1 'atd; at now <<< "mkdir -p /eos/ && mount -t fuse eosxd -ofsname=eosdockertest /eos/"'
    - exec_cmd eos-cli1 'count=0; while [[ $count -le 10 ]] && ( [[ ! -d /eos/ ]] ); do echo "Wait for mount... $count"; (( count++ )); sleep 1; done;'
    # set krb5 ticket and download tests repo
    - exec_cmd eos-cli1 'su eos-user -c "kinit eos-user@TEST.EOS -k -t /home/eos-user/eos-user.keytab"'
    - exec_cmd eos-cli1 'su eos-user -c "git clone https://gitlab.cern.ch/dss/eosclient-tests.git /eos/user/e/eos-user/eosclient-tests"'
    # launch the tests
    - exec_cmd eos-cli1 'su eos-user -c "cd /eos/user/e/eos-user && python2 ./eosclient-tests/run.py --workdir=/eos/user/e/eos-user ci-eosfuse_release"'
    - exec_cmd eos-cli1 'su eos-user -c "cd /eos/user/e/eos-user && python2 ./eosclient-tests/run.py --workdir=/eos/user/e/eos-user regression"'
  <<: *dock8s_after_script_template
  allow_failure: true # @note remove soon, once stable
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs-${CI_JOB_ID}/

k8s_system:
  <<: *dock8s_system_test_template
  dependencies: []
  retry: 1
  tags:
    - shell-with-kubernetes

k8s_fusex:
  <<: *dock8s_fusex_test_template
  dependencies: []
  retry: 1
  tags:
    - shell-with-kubernetes

k8s_cbox:
  <<: *dock8s_cbox_test_template
  dependencies: []
  retry: 1
  tags:
    - shell-with-kubernetes

k8s_stress:
  stage: test
  <<: *dock8s_before_script_template
  script:
    - TEST_URL="eos-mgm1.eos-mgm1.$K8S_NAMESPACE.svc.cluster.local"
    - exec_cmd eos-mgm1 "hammer-runner.py --strict-exit-code 1 --gitlab --url ${TEST_URL}//eos/dockertest/hammer/ --protocols xroot --threads 1 2 10 100 --operations write stat read delete --runs 3 --nfiles 10000"
  <<: *dock8s_after_script_template
  dependencies: []
  retry: 1
  tags:
    - shell-with-kubernetes

dock_system:
  <<: *dock8s_system_test_template
  dependencies:
    - clone_docker
  retry: 1
  tags:
    - shell-with-docker
  when: manual

dock_fusex:
  <<: *dock8s_fusex_test_template
  dependencies:
    - clone_docker
  retry: 1
  tags:
    - shell-with-docker
  when: manual

dock_cbox:
  <<: *dock8s_fusex_test_template
  dependencies:
    - clone_docker
  retry: 1
  tags:
    - shell-with-docker
  when: manual

dock_stress:
  stage: test
  <<: *dock8s_before_script_template
  script:
    - TEST_URL="eos-mgm1.eoscluster.cern.ch"
    - exec_cmd eos-mgm1 "hammer-runner.py --strict-exit-code 1 --gitlab --url ${TEST_URL}//eos/dockertest/hammer/ --protocols xroot --threads 1 2 10 100 --operations write stat read delete --runs 3 --nfiles 10000"
  <<: *dock8s_after_script_template
  dependencies:
    - clone_docker
  retry: 1
  tags:
    - shell-with-docker
  when: manual

.unit_test_template: &unit_test_template_definition
  stage: test
  script:
    # generic unit tests
    - eos-unit-tests
    - eos-fst-unit-tests
    - eos-fusex-tests
    # namespace specific unit tests
    - export EOS_QUARKDB_HOSTPORT=localhost:7777
    - quarkdb-create --path /var/quarkdb/node-0
    - chown -R daemon:daemon /var/quarkdb/node-0
    - /usr/bin/xrootd -n qdb -c /etc/xrd.cf.quarkdb -l /var/log/eos/xrdlog.qdb -b -Rdaemon
    - eos-ns-quarkdb-tests
  dependencies: []
  retry: 1
  tags:
    - docker_node
    - unit_tests

unit_test:tag:
  image:
    name: gitlab-registry.cern.ch/dss/eos:no_sse_${CI_COMMIT_TAG}
    entrypoint: ["/bin/bash", "-c"]
  <<: *unit_test_template_definition
  only:
    - tags

unit_test:
  image:
    name: gitlab-registry.cern.ch/dss/eos:no_sse_${CI_COMMIT_SHORT_SHA}
    entrypoint: ["/bin/bash", "-c"]
  <<: *unit_test_template_definition
  except:
    - tags

#-------------------------------------------------------------------------------
# RPM publishing @note BRANCH="citrine-no_sse"
#-------------------------------------------------------------------------------

rpm_commit_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ $CI_COMMIT_TAG ]]; then echo "This only works for commits"; exit 0; else BUILD_TYPE="commit"; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts.sh ${BRANCH} ${BUILD_TYPE} /eos/project/s/storage-ci/www/eos
  tags:
    - docker_node
    - publish
  except:
    - tags
  allow_failure: true
  when: manual

rpm_testing_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE="tag/testing"; else BUILD_TYPE="commit"; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts.sh ${BRANCH} ${BUILD_TYPE} /eos/project/s/storage-ci/www/eos
  tags:
    - docker_node
    - publish
  only:
    - master
    - tags
  retry: 2
  when: manual

rpm_stable_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE="tag"; else echo "This only works for tags"; exit 0; fi
    - ./gitlab-ci/store_artifacts.sh ${BRANCH} ${BUILD_TYPE} /mnt/eos_repositories/eos
    - sudo -u stci -H ./gitlab-ci/store_stable_artifacts.sh ${BRANCH} /eos/project/s/storage-ci/www/eos ${CI_COMMIT_TAG}
    - echo ${CI_COMMIT_TAG} | sudo -u stci tee /eos/project/s/storage-ci/www/eos/${BRANCH}/tag/latest_version
  tags:
    - docker_node
    - publish
  only:
    - tags
  dependencies: []
  when: manual


#-------------------------------------------------------------------------------
# RPM cleaning
#-------------------------------------------------------------------------------

clean_rpm_artifacts:
  stage: clean
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sssd-client sudo createrepo
    - sudo -u stci -H ./gitlab-ci/remove_old_artifacts.sh
  allow_failure: true
  only:
    - triggers
    - schedules
  tags:
    - docker_node
    - clean

clean_k8s_cluster:
  stage: clean
  script:
    - set +o pipefail
    - . /home/gitlab-runner/coe-cluster-config/st-gitlab-k8s-02/env_st-gitlab-k8s-02.sh # get access configs for the cluster
    - kubectl get pods --no-headers --all-namespaces | 
      grep -E 'ImagePullBackOff|ErrImagePull|Evicted' | 
      awk '{print $2 " --namespace=" $1}' | 
      xargs --no-run-if-empty -n2 kubectl delete pods
    - kubectl get namespaces --no-headers -o custom-columns=":metadata.name,:.metadata.creationTimestamp" | 
      grep -v 'default\|kube-public\|kube-system' | 
      awk '$2 <= "'$( date --utc -d "3 days ago" +"%Y-%m-%dT%H:%M:%SZ" )'" { print $1 }' | 
      xargs --no-run-if-empty kubectl delete namespaces
  dependencies: []
  allow_failure: true
  only:
    - schedules
  tags:
    - shell-with-kubernetes


#-------------------------------------------------------------------------------
# Manually triggered builds
#-------------------------------------------------------------------------------

eos_nginx_cc7:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git sssd-client sudo createrepo
    - cd nginx
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
    - cc7
  when: manual
  environment:
    name: nginx-cc7-prod

eos_apmon_cc7:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git sssd-client sudo createrepo
    - cd ApMon
    - ./maketar.sh
    - rpmbuild --define "_source_filedigest_algorithm md5" --define "_binary_filedigest_algorithm md5" --define "_topdir ./rpmbuild" -ts eos-apmon-*.tar.gz
    - yum-builddep --nogpgcheck -y rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - rpmbuild --rebuild --define "_rpmdir rpmbuild/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
    - cc7
  when: manual
  environment:
    name: apmon-cc7-prod

eos_microhttpd_cc7:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ make rpm-build which git sssd-client sudo createrepo
    - cd microhttpd
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
    - cc7
  when: manual

eos_docs:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y make python-sphinx sssd-client sudo which git
    - cd doc
    - export PYTHONPATH=`pwd`/_themes/
    - make html
    - sudo -u stci -H bash -c "rm -rf /eos/project/e/eos/www/docs/*"
    - sudo -u stci -H cp -R _build/html/* /eos/project/e/eos/www/docs/
  tags:
    - docker_node
  when: manual

eos_repopackage:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y rpm-build sssd-client sudo createrepo
    - mkdir build
    - cd build
    - rpmbuild --bb --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" ../elrepopackage.spec
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}/tag/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}/tag/el-6/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual
