stages:
  - prebuild
  - build:rpm
  - build:exotic
  - build:manual
  - build:dockerimage
  - test
  - coverage
  - publish
  - clean


default:
  before_script:
    - source gitlab-ci/export_branch.sh
    - echo "Exporting BRANCH=${BRANCH}"
    - source gitlab-ci/export_commit-type.sh
    - echo "Exporting COMMIT_TYPE=${COMMIT_TYPE}"



#-------------------------------------------------------------------------------
# Prebuild
#-------------------------------------------------------------------------------

# Using different images since their behaviour look inconsistent. Worth a ticket
.prebuid-template: &prebuild-template_definition
  stage: prebuild
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    #    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/gitlab-ci/prebuild_OSbase/Dockerfile_prebuild-$PREBUILD_NAME --destination gitlab-registry.cern.ch/dss/eos/prebuild-$PREBUILD_NAME ;;
    - case $PREBUILD_NAME in
      slc6) /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/gitlab-ci/prebuild_OSbase/Dockerfile_prebuild-slc6 --destination gitlab-registry.cern.ch/dss/eos/prebuild-slc6 ;;
      c8) /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/gitlab-ci/prebuild_OSbase/Dockerfile_prebuild-c8 --destination gitlab-registry.cern.ch/dss/eos/prebuild-c8 ;;
      *) echo "var PREBUILD_NAME:$PREBUILD_NAME not properly defined"; exit 1 ;;
      esac
  when: manual

prebuid-slc6:
  <<: *prebuild-template_definition
  variables:
    PREBUILD_NAME: slc6

prebuild-c8:
  <<: *prebuild-template_definition
  variables:
    PREBUILD_NAME: c8
  allow_failure: true # @todo remove allow_failure once c8 builds are solid

.prebuid_cc7-template: &prebuild_cc7-template_definition
  stage: prebuild
  image:
    name: gitlab-registry.cern.ch/ci-tools/docker-image-builder
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - case $PREBUILD_NAME in
      *cc7*) /kaniko/executor --build-arg PREBUILD_NAME="$PREBUILD_NAME" --build-arg CMAKE_OPTIONS="$CMAKE_OPTIONS" --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/gitlab-ci/prebuild_OSbase/Dockerfile_prebuild-cc7 --destination "gitlab-registry.cern.ch/dss/eos/prebuild-${PREBUILD_NAME}" ;;
      *) echo "var PREBUILD_NAME:$PREBUILD_NAME not properly defined"; exit 1 ;;
      esac
  when: manual

prebuild-cc7:
  <<: *prebuild_cc7-template_definition
  variables:
    PREBUILD_NAME: cc7

# schedules ------------------------------

prebuild-cc7_clang:
  <<: *prebuild_cc7-template_definition
  variables:
    PREBUILD_NAME: cc7_clang
    CMAKE_OPTIONS: "-DCLANG_BUILD=1"
#  only:
#    - schedules
  allow_failure: true

prebuild-cc7_xrd_testing:
  <<: *prebuild_cc7-template_definition
  variables:
    PREBUILD_NAME: cc7_xrd_testing
#  only:
#    - schedules
  except:
    - tags
  allow_failure: true

prebuild-cc7_asan:
  <<: *prebuild_cc7-template_definition
  variables:
    PREBUILD_NAME: cc7_asan
    CMAKE_OPTIONS: "-DASAN=1"
    CXXFLAGS: "-Wno-parentheses"  # Avoid boost header compilation errors
#  only:
#    - schedules
  allow_failure: true

prebuild-cc7_coverage:
  <<: *prebuild_cc7-template_definition
  variables:
    PREBUILD_NAME: cc7_coverage
  only:
    variables:
      - $COVERAGE_SCHEDULE
  allow_failure: true

prebuild-cc7_xrd_cta:
  <<: *prebuild_cc7-template_definition
  variables:
    PREBUILD_NAME: cc7_xrd_cta
  allow_failure: true


#-------------------------------------------------------------------------------
# Build RPMs
#-------------------------------------------------------------------------------

.build_cc7:
  stage: build:rpm
  image: gitlab-registry.cern.ch/dss/eos/prebuild-cc7
  before_script:
    - yum install -y moreutils
  script:
    - git submodule update --init --recursive
    - ls -l;
    - mkdir build
    - cd build/
    - ls -l;
    - cmake3 ../ -DPACKAGEONLY=1
    - make srpm | ts
    - cd ../
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\npriority=2\n' >> /etc/yum.repos.d/eos-depend.repo
    - yum-builddep --nogpgcheck --setopt="cern*.exclude=xrootd*" -y build/SRPMS/*
    - if [ "$COMMIT_TYPE" == "tag" ]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache.sh; fi
    - rpmbuild --rebuild --with server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/* | ts
    - ccache -s
    - if [ "$COMMIT_TYPE" == "tag" ]; then gpg --allow-secret-key-import --import /keys/stci-debian-repo.sec; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir cc7_artifacts; cp -R build/SRPMS/ build/RPMS/ cc7_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - cc7_artifacts/
  tags:
    - docker_node
    - cc7

.build_slc6:
  stage: build:rpm
  image: gitlab-registry.cern.ch/dss/eos/prebuild-slc6
  before_script:
    - yum install -y moreutils
  script:
    - git submodule update --init --recursive
    - mkdir build
    - cd build
    - cmake3 .. -DPACKAGEONLY=1
    - make srpm | ts
    - cd ..
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-6/x86_64/\ngpgcheck=0\nenabled=1\npriority=1\n' >> /etc/yum.repos.d/eos-depend.repo
    - yum-builddep --nogpgcheck --setopt="cern*.exclude=xrootd*" -y build/SRPMS/*
    - if [ "$COMMIT_TYPE" == "tag" ]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache_slc6.sh; fi
    - rpmbuild --rebuild --with server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/* | ts
    - ccache -s
    - if [ "$COMMIT_TYPE" == "tag" ]; then gpg --allow-secret-key-import --import /keys/stci-debian-repo.sec; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir slc6_artifacts
    - cp -R build/SRPMS slc6_artifacts
    - cp -R build/RPMS slc6_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - slc6_artifacts/
  tags:
    - docker_node
    - slc6

.macosx_dmg:
  stage: build:rpm
  script:
    - git submodule update --init --recursive
    - mkdir build
    - mkdir install
    - cd build
    - cmake -DCLIENT=1 -DCMAKE_INSTALL_PREFIX=/usr/local -D Z_ROOT_DIR=/usr/local/opt/zlib/ -D OPENSSL_ROOT_DIR=/usr/local/opt/openssl/ -D NCURSES_ROOT_DIR=/usr/local/opt/ncurses/ -D ZMQ_ROOT_DIR=/usr/local/opt/zeromq/ -D XROOTD_ROOT_DIR=/usr/local/opt/xrootd/ -D UUID_ROOT_DIR=/usr/local/opt/ossp-uuid ..
    - make -j 4
    - make install DESTDIR=../install/
    - version=`../genversion.sh`
    - ../utils/eos-osx-package.sh $version ../install/
    - ccache -s
    - cd ..
    - mkdir osx_artifacts
    - cp build/*.dmg osx_artifacts
  artifacts:
    expire_in: 1 day
    paths:
      - osx_artifacts/
  tags:
    - macosx-shell

clone_docker:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y git
    - git clone https://gitlab.cern.ch/eos/eos-docker.git
  artifacts:
    expire_in: 1 day
    paths:
      - eos-docker/
  tags:
    - docker_node

# schedules ------------------------------

.build_fedora-template: &build_fedora-template_definition
  stage: build:rpm
  script:
    - dnf install --nogpg -y gcc-c++ cmake3 make rpm-build which git tar dnf-plugins-core ccache rpm-sign
    - git submodule update --init --recursive
    - mkdir build; cd build
    - cmake3 .. -DPACKAGEONLY=1; make srpm; cd ..
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/'${EOS_ARCH}'/x86_64/\ngpgcheck=0\nenabled=1\nexclude=xrootd*\npriority=4\n' >> /etc/yum.repos.d/eos-depend.repo
    - dnf builddep --nogpgcheck --allowerasing -y build/SRPMS/*
    - if [ "$COMMIT_TYPE" == "tag" ]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache_fc.sh; fi
    # @todo: add this flag to have the build pass as it fails during boost header compilation - should be removed in the future ...
    - export CXXFLAGS="-Wno-parentheses"
    - rpmbuild --rebuild --with server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/*
    - ccache -s
    - if [ "$COMMIT_TYPE" == "tag" ]; then gpg2 --allow-secret-key-import --import /keys/stci-debian-repo.sec; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir ${EOS_ARCH}_artifacts
    - cp -R build/SRPMS ${EOS_ARCH}_artifacts
    - cp -R build/RPMS ${EOS_ARCH}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - ${EOS_ARCH}_artifacts/
  allow_failure: true

.build_fedora_stable:
  image: fedora:31
  <<: *build_fedora-template_definition
  variables:
    EOS_ARCH: fc-31
  tags:
    - docker_node
    - fedora_stable
  only:
    - schedules
    - tags

.build_fedora_rawhide:
  image: registry.fedoraproject.org/fedora:rawhide
  <<: *build_fedora-template_definition
  variables:
    EOS_ARCH: fc-rawhide
  tags:
    - docker_node
    - fedora_rawhide
  only:
    - schedules

.build_ubuntu-template: &build_ubuntu-template_definition
  stage: build:rpm
  script:
    - apt-get update -y; apt-get install -y git cmake g++ debhelper devscripts equivs gdebi-core ccache gawk
    # @todo re-enable building against latest XRootD master commit when CMake allows using XRootD plugin version 5 libraries
    #- echo -e '\ndeb http://storage-ci.web.cern.ch/storage-ci/debian/xrootd/ '${EOS_ARCH}' master' >> /etc/apt/sources.list
    - echo -e '\ndeb http://storage-ci.web.cern.ch/storage-ci/debian/xrootd/ '${EOS_ARCH}' release' >> /etc/apt/sources.list
    - wget -O - http://storage-ci.web.cern.ch/storage-ci/storageci.key | apt-key add -
    - apt-get update -y
    - git submodule update --init --recursive
    # @todo once the XRootD deb repos are better structured we can point to a
    # particular stable branch for the moment we force install the version we want
    - export XROOTD_VERSION=`grep "define xrootd_version_min" eos.spec.in | awk -F ':' '{print $2;}'`
    - apt-get install -y xrootd-libs=${XROOTD_VERSION} xrootd-server-libs=${XROOTD_VERSION} xrootd-client-libs=${XROOTD_VERSION} xrootd-devel=${XROOTD_VERSION} xrootd-client-devel=${XROOTD_VERSION} xrootd-server-devel=${XROOTD_VERSION} xrootd-private-devel=${XROOTD_VERSION}
    - mk-build-deps --build-dep debian/control
    - gdebi -n eos-build-deps-depends*.deb
    - dch --create -v `./genversion.sh` --package eos --urgency low --distribution ${EOS_ARCH} -M "This package is built and released automatically. For important notices and releases subscribe to our mailing lists or visit our website."
    - if [[ $CI_COMMIT_TAG ]]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache_deb.sh; fi
    - dpkg-buildpackage -b -us -uc -tc --buildinfo-option="-udeb_packages" --changes-option="-udeb_packages"
    - ccache -s
    - mkdir ${EOS_ARCH}_artifacts/
    - cp deb_packages/*.deb ${EOS_ARCH}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - ${EOS_ARCH}_artifacts/
#  allow_failure: true @note why allow_failure?

.build_ubuntu_bionic:
  image: ubuntu:bionic
  before_script:
    - apt-get update
    - apt-get install -y apt-transport-https ca-certificates gnupg software-properties-common wget
    - wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | apt-key add -
    - apt-add-repository 'deb https://apt.kitware.com/ubuntu/ '${EOS_ARCH}' main'
  <<: *build_ubuntu-template_definition
  variables:
    EOS_ARCH: bionic
  tags:
    - docker_node
    - ubuntu
#  only:
#    - schedules
#    - tags

.build_cc7_exotic-template: &build_cc7_exotic-template_definition
  stage: build:exotic
  image: gitlab-registry.cern.ch/dss/eos/prebuild-${BUILD_NAME}
  script:
    - git submodule update --init --recursive
    - ls -l;
    - mkdir build
    - cd build/
    - ls -l;
    - cmake3 ../ -DPACKAGEONLY=1 ${CMAKE_OPTIONS}
    - make srpm
    - cd ../
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\npriority=2\n' >> /etc/yum.repos.d/eos-depend.repo
    - yum-builddep --nogpgcheck --setopt="cern*.exclude=xrootd*" -y build/SRPMS/*
    - if [ "$COMMIT_TYPE" == "tag" ]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache.sh; fi
    - rpmbuild --rebuild --with server ${RPMBUILD_OPTIONS} --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/*
    - ccache -s
    - if [ "$COMMIT_TYPE" == "tag" ]; then gpg --allow-secret-key-import --import /keys/stci-debian-repo.sec; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir ${BUILD_NAME}_artifacts
    - cp -R build/SRPMS/ build/RPMS/ ${BUILD_NAME}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ccache/
  artifacts:
    expire_in: 1 day
    paths:
      - ${BUILD_NAME}_artifacts/
  when: manual # @todo remove when:manual

.build_cc7_xrd_testing: # Re-enable xrd_testing jobs once project ugprades to XRootD 5
  <<: *build_cc7_exotic-template_definition
  variables:
    BUILD_NAME: cc7_xrd_testing
  tags:
    - docker_node
    - cc7
#  only:
#    - schedules
  except:
    - tags
  allow_failure: true

.build_cc7_asan:
  <<: *build_cc7_exotic-template_definition
  variables:
    BUILD_NAME: cc7_asan
    CMAKE_OPTIONS: "-DASAN=1"
    RPMBUILD_OPTIONS: "--with asan"
    CXXFLAGS: "-Wno-parentheses"    # Avoid boost header compilation errors
  tags:
    - docker_node
#  only:
#    - schedules
  allow_failure: true # @todo remove allow_failure

.build_cc7_clang:
  <<: *build_cc7_exotic-template_definition
  variables:
    BUILD_NAME: cc7_clang
    CMAKE_OPTIONS: "-DCLANG_BUILD=1"
    RPMBUILD_OPTIONS: "--with clang"
  tags:
    - docker_node
    - cc7
  #  only:
  #    - schedules
  allow_failure: true # @note really allow?
  when: manual

.build_cc7_coverage:
  <<: *build_cc7_exotic-template_definition
  variables:
    BUILD_NAME: cc7_coverage
    RPMBUILD_OPTIONS: "--with coverage"
  tags:
    - docker_node
    - cc7
  only:
    variables:
      - $COVERAGE_SCHEDULE
  when: manual

.build_cc7_xrd_cta:
  <<: *build_cc7_exotic-template_definition
  variables:
    BUILD_NAME: cc7_xrd_cta
  tags:
    - docker_node
    - cc7
  allow_failure: true
  when: manual


#-------------------------------------------------------------------------------
# Build docker images
#-------------------------------------------------------------------------------

.cc7_docker_image_commit:
  stage: build:dockerimage
  tags:
    - docker-image-build
  script:
    - ""
  variables:
    TO: gitlab-registry.cern.ch/dss/eos:${CI_PIPELINE_ID}
    DOCKER_FILE: eos-docker/Dockerfile
#  dependencies:
  needs:
    - build_cc7
    - clone_docker
  only:
    - branches
  except:
    - tags

.cc7_docker_image_tag:
  stage: build:dockerimage
  tags:
    - docker-image-build
  script:
    - ""
  variables:
    TO: gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG}
    DOCKER_FILE: eos-docker/Dockerfile
    NO_CACHE: 1
  #  dependencies:
  needs:
    - build_cc7
    - clone_docker
  only:
    - tags

# schedules ------------------------------

.ubuntu_bionic_docker_image_commit:
  stage: build:dockerimage
  tags:
    - docker-image-build
  script:
    - ""
  variables:
    TO: gitlab-registry.cern.ch/dss/eos:ubuntu_bionic_client_${CI_PIPELINE_ID}
    DOCKER_FILE: eos-docker/Dockerfile_ubuntu_bionic
  #  dependencies:
  needs:
    - build_ubuntu_bionic
    - clone_docker
#  only:
#    - schedules
  except:
    - tags

.ubuntu_bionic_docker_image_tag:
  stage: build:dockerimage
  tags:
    - docker-image-build
  script:
    - ""
  variables:
    TO: gitlab-registry.cern.ch/dss/eos:ubuntu_bionic_client_${CI_COMMIT_TAG}
    DOCKER_FILE: eos-docker/Dockerfile_ubuntu_bionic
    NO_CACHE: 1
  #  dependencies:
  needs:
    - build_ubuntu_bionic
    - clone_docker
  only:
    - tags

.cc7_xrd_testing_docker_image:
  stage: build:dockerimage
  tags:
    - docker-image-build
  script:
    - ""
  variables:
    TO: gitlab-registry.cern.ch/dss/eos:xrd_testing_${CI_PIPELINE_ID}
    DOCKER_FILE: eos-docker/Dockerfile_xrd_testing
  #  dependencies:
  needs:
    - build_cc7_xrd_testing
    - clone_docker
#  only:
#    - schedules
  except:
    - tags
  allow_failure: true

.cc7_asan_docker_image:
  stage: build:dockerimage
  tags:
    - docker-image-build
  script:
    - ""
  variables:
    TO: gitlab-registry.cern.ch/dss/eos:asan_${CI_PIPELINE_ID}
    DOCKER_FILE: eos-docker/Dockerfile_asan
    BUILD_ARG: BRANCH=${BRANCH}
  #  dependencies:
  needs:
    - build_cc7_asan
    - clone_docker
#  only:
#    - schedules
  except:
    - tags
  allow_failure: true

.cc7_coverage_docker_image:
  stage: build:dockerimage
  tags:
    - docker-image-build
  script:
    - ""
  variables:
    TO: gitlab-registry.cern.ch/dss/eos:coverage_${CI_PIPELINE_ID}
    DOCKER_FILE: eos-docker/Dockerfile_coverage
    BUILD_ARG: BRANCH=${BRANCH}
  dependencies:
    - build_cc7_coverage
    - clone_docker
  only:
    variables:
      - $COVERAGE_SCHEDULE


#-------------------------------------------------------------------------------
# Dock8rnetes testing framework (exec_cmd wraps both docker and k8s)
#-------------------------------------------------------------------------------

.dock8s_before_script_template: &dock8s_before_script_template
  before_script:
    - if [[ $CI_JOB_NAME =~ "k8s" ]]; then
        source ./gitlab-ci/before_script_k8s_test.sh;
        source ./gitlab-ci/utilities_func_for_tests.sh --type k8s $K8S_NAMESPACE;
      elif [[ $CI_JOB_NAME =~ "dock" ]]; then
        source ./gitlab-ci/before_script_docker_test.sh;
        source ./gitlab-ci/utilities_func_for_tests.sh --type docker;
      fi

.dock8s_after_script_template: &dock8s_after_script_template
  after_script:
    - if [[ ! $CI_JOB_NAME =~ "k8s" ]]; then
        ./gitlab-ci/after_script_k8s_test.sh;
      elif [[ $CI_JOB_NAME =~ "dock" ]]; then
        ./gitlab-ci/after_script_docker_test.sh;
      fi

.dock8s_system_test_template: &dock8s_system_test_template
  stage: test
  <<: *dock8s_before_script_template
  script:
    - date; exec_cmd eos-mgm1 eos-instance-test-ci; date;
    - if [[ $CI_JOB_NAME =~ "k8s" ]]; then
        kubectl cp $K8S_NAMESPACE/$(get_podname eos-cli1):/usr/sbin/eos-fsck-test ./eos-fsck-test;
        chmod +x eos-fsck-test; date; ./eos-fsck-test --type k8s $K8S_NAMESPACE; date; rm -rf eos-fsck-test;
      elif [[ $CI_JOB_NAME =~ "dock" ]]; then
        docker cp eos-cli1:/usr/sbin/eos-fsck-test .;
        chmod +x eos-fsck-test; date; ./eos-fsck-test --type docker; date; rm -rf eos-fsck-test;
      fi
  <<: *dock8s_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs/

new-k8s_system:
  <<: *dock8s_system_test_template
  #  needs:
  #    - cc7_docker_image_commit # @todo that would need tag as well, if it is a tag pipeline...
  tags:
    - k8s_node
  allow_failure: true
  retry: 1

new-dock_system:
  stage: test
  <<: *dock8s_system_test_template
  variables:
    EOS_IMG_NAME: "eos:"
  #  needs:
  #    - clone_docker
  #    - cc7_docker_image_commit # @todo that would need tag as well, if it is a tag pipeline...
  tags:
    - shell-with-docker
  allow_failure: true
  retry: 1


.dock8s_fusex_test_template: &dock8s_fusex_test_template
  stage: test
  <<: *dock8s_before_script_template
  script:

    # @todo(esindril): run "all" tests in schedule mode once these are properly supported
    # if [ "$CI_PIPELINE_SOURCE" == "schedule" ];
    # then
    # 	exec_cmd eos-mgm1 'eos vid add gateway "eos-cli1.eos-cli1.${K8S_NAMESPACE}.svc.cluster.local" unix';
    # 	exec_cmd eos-cli1 'env EOS_FUSE_NO_ROOT_SQUASH=1 python /eosclient-tests/run.py --workdir="/eos1/dockertest /eos2/dockertest" ci';
    # fi
    # until then just run the "ci" tests

    - exec_cmd eos-cli1 "git clone https://gitlab.cern.ch/dss/eosclient-tests.git"
    - exec_cmd eos-cli1 'atd; at now <<< "mkdir /eos1/; mount -t fuse eosxd -ofsname=mount-1 /eos1/; mkdir /eos2/; mount -t fuse eosxd -ofsname=mount-2 /eos2/;"'
    - exec_cmd eos-cli1 'count=0; while [[ $count -le 10 ]] && ( [[ ! -d /eos1/dockertest/ ]] || [[ ! -d /eos2/dockertest/ ]] ); do echo "Wait for mount... $count"; (( count++ )); sleep 1; done;'
#    - exec_cmd eos-cli1 env EOS_MGM_URL=root://eos-mgm1.eoscluster.cern.ch bash -c 'cd /eosclient-tests; git checkout rtb_clone; prepare/clone_test.sh prepare; rc=$?; git checkout master; exit $rc'
    - exec_cmd eos-cli1 "su - eos-user -c 'mkdir /eos1/dockertest/fusex_tests/; cd /eos1/dockertest/fusex_tests/; /usr/sbin/fusex-benchmark'"

    - exec_cmd eos-cli1 " /bin/bash -c 'cd eosclient-tests &&  for n in prepare/*.sh; do /bin/bash $n prepare; done' "
    - exec_cmd eos-cli1 "su - eos-user -c 'python /eosclient-tests/run.py --workdir=\"/eos1/dockertest /eos2/dockertest\" ci'"
    - exec_cmd eos-cli1 " /bin/bash -c 'cd eosclient-tests &&  for n in prepare/*.sh; do /bin/bash $n cleanup; done' "

  <<: *dock8s_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs/


new-k8s_fusex:
  <<: *dock8s_fusex_test_template
  #  needs:
  #    - cc7_docker_image_commit # @todo that would need tag as well, if it is a tag pipeline...
  tags:
    - k8s_node
  allow_failure: true
  retry: 1

new-k8s_fusex_ubuntu:
  <<: *dock8s_fusex_test_template
  variables:
    CLI_BASETAG: "ubuntu_bionic_client_"
#  needs:
#    - cc7_docker_image_commit # @todo that would need tag as well, if it is a tag pipeline...
#    - ubuntu_bionic_docker_image_commit # @todo that would need tag as well, if it is a tag pipeline...
  #  only:
  #    - schedules
  tags:
    - k8s_node
  allow_failure: true
  retry: 1

new-dock_fusex:
  stage: test
  <<: *dock8s_fusex_test_template
  variables:
    EOS_IMG_NAME: "eos:"
  #  needs:
  #    - clone_docker
  #    - cc7_docker_image_commit # @todo that would need tag as well, if it is a tag pipeline...
  tags:
    - shell-with-docker
  allow_failure: true
  retry: 1

new-dock_fusex_ubuntu:
  stage: test
  <<: *dock8s_fusex_test_template
  variables:
    EOS_IMG_NAME: "eos:ubuntu_bionic_client_"
  #  needs:
  #    - clone_docker
  #    - cc7_docker_image_commit # @todo that would need tag as well, if it is a tag pipeline...
  tags:
    - shell-with-docker
  allow_failure: true
  retry: 1


#-------------------------------------------------------------------------------
# Kubernetes testing framework
#-------------------------------------------------------------------------------

.k8s_before_script_template: &k8s_before_script_template
  before_script:
    - . /home/gitlab-runner/coe-cluster-config/st-gitlab-k8s-02/env_st-gitlab-k8s-02.sh # get access configs for the cluster
    - git clone https://gitlab.cern.ch/eos/eos-on-k8s.git
    - NAMESPACE=$(echo ${CI_JOB_NAME}-${CI_JOB_ID}-${CI_PIPELINE_ID} | tr _ -)
#    - IMAGE_TAG="${BASETAG}${CI_COMMIT_TAG}${CI_PIPELINE_ID}"; CLI_IMAGE_TAG="${BASETAG}${CLI_BASETAG}${CI_COMMIT_TAG}${CI_PIPELINE_ID}"; # always only one between $CI_COMMIT_TAG $CI_PIPELINE_ID exists
    - IMAGE_TAG="${BASETAG}1414091"; CLI_IMAGE_TAG="${BASETAG}${CLI_BASETAG}1414091"; # @todo temporary test with this
    - if [[ "$CI_JOB_NAME" =~ "k8s_unit" ]]; then
        ./eos-on-k8s/create-mgm.sh -i ${IMAGE_TAG} -n ${NAMESPACE} -q;
      else
        ./eos-on-k8s/create-all.sh -i ${IMAGE_TAG} -u ${CLI_IMAGE_TAG} -n ${NAMESPACE} -q;
      fi;

.k8s_after_script_template: &k8s_after_script_template
  after_script:
    - . /home/gitlab-runner/coe-cluster-config/st-gitlab-k8s-02/env_st-gitlab-k8s-02.sh # get access configs for the cluster
    - NAMESPACE=$(echo ${CI_JOB_NAME}-${CI_JOB_ID}-${CI_PIPELINE_ID} | tr _ -) # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character
    - ./eos-on-k8s/collect_logs.sh ${NAMESPACE} eos-logs/
    - ./eos-on-k8s/delete-all.sh ${NAMESPACE}
    - rm -rf eos-on-k8s/
    - docker images -q | xargs docker rmi || true # remove unused images

.k8s_system_test_template: &k8s_system_test_template
  stage: test
  <<: *k8s_before_script_template
  script:
    - if [[ ! $CI_JOB_NAME =~ "ubuntu" ]]; then
        date; kubectl exec --namespace=$NAMESPACE $(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-mgm1) -- eos-instance-test-ci; date;
      fi
    - if [[ ! $CI_JOB_NAME =~ "ubuntu" ]]; then
        kubectl cp $NAMESPACE/$(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-cli1):/usr/sbin/eos-fsck-test ./eos-fsck-test;
        date; chmod +x eos-fsck-test; ./eos-fsck-test --type k8s $NAMESPACE ; rm -rf eos-fsck-test; date;
      fi
    - date; ./gitlab-ci/k8s_system_test_script.sh ${NAMESPACE}; date
  <<: *k8s_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs/

k8s_system_qdb:
  <<: *k8s_system_test_template
  #  dependencies:
#  needs:
#    - cc7_docker_image_commit # @todo that would need tag as well, if it is a tag pipeline...
  tags:
    - k8s_node

k8s_ubuntu_system:
  <<: *k8s_system_test_template
  variables:
    CLI_BASETAG: "ubuntu_bionic_client_"
  #  dependencies:
#  needs:
#    - cc7_docker_image_commit # @todo that would need tag as well, if it is a tag pipeline...
#    - ubuntu_bionic_docker_image_commit # @todo that would need tag as well, if it is a tag pipeline...
  tags:
    - k8s_node
  #  only:
  #    - schedules
  allow_failure: true
  retry: 1

.k8s_system_qdb_xt: # xt stands for xrd_testing. Must shorten to not hit HOST_NAME_MAX
  <<: *k8s_system_test_template
  variables:
    BASETAG: "xrd_testing_"
  #  dependencies:
#  needs:
#    - cc7_xrd_testing_docker_image # @todo that would need tag as well, if it is a tag pipeline...
  tags:
    - k8s_node
#  only:
#    - schedules
  allow_failure: true
  retry: 1

.k8s_unit_test_template: &k8s_unit_test_template
  stage: test
  <<: *k8s_before_script_template
  script:
    # generic unit tests
    - if [[ "$CI_JOB_NAME" =~ "asan" ]]; then export LSAN_OPTIONS="suppressions=/var/eos/test/LeakSanitizer.supp" ; else export LSAN_OPTIONS="" ; fi
    - kubectl exec -n $NAMESPACE -i $(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-mgm1) -- bash -c "LSAN_OPTIONS=${LSAN_OPTIONS} eos-unit-tests"
    - kubectl exec -n $NAMESPACE -i $(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-mgm1) -- bash -c "LSAN_OPTIONS=${LSAN_OPTIONS} eos-fst-unit-tests"
    - kubectl exec -n $NAMESPACE -i $(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-mgm1) -- bash -c "export LSAN_OPTIONS=${LSAN_OPTIONS}; eos-fusex-tests" # invoked command must contain a parent PID, hence the need for 2 commands to force a shell context
    # namespace specific unit tests
    - if [[ "$CI_JOB_NAME" =~ "asan" ]]; then export ASAN_OPTIONS="fast_unwind_on_malloc=0" ; else export ASAN_OPTIONS="" ; fi
    - kubectl exec -n $NAMESPACE -i $(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-mgm1) -- bash -c "ASAN_OPTIONS=${ASAN_OPTIONS} eos-ns-quarkdb-tests"
  <<: *k8s_after_script_template

k8s_unit:
  <<: *k8s_unit_test_template
  #  dependencies:
#  needs:
#    - cc7_docker_image_commit # @todo that would need tag as well, if it is a tag pipeline...
  tags:
    - k8s_node

.k8s_unit_asan:
  <<: *k8s_unit_test_template
  variables:
    BASETAG: "asan_"
  #  dependencies:
#  needs:
#    - cc7_asan_docker_image # @todo that would need tag as well, if it is a tag pipeline...
  tags:
    - k8s_node
#  only:
#    - schedules
  allow_failure: true

k8s_stress:
  stage: test
  <<: *k8s_before_script_template
  script:
    - | # new lines are folded into spaces
      kubectl exec -n $NAMESPACE -i $(kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=":metadata.name" -l app=eos-mgm1) -- \
      hammer-runner.py --strict-exit-code 1 --gitlab --url eos-mgm1.eos-mgm1.$NAMESPACE.svc.cluster.local//eos/dockertest/hammer/ --protocols xroot --threads 1 2 10 100 --operations write stat read delete --runs 3 --nfiles 10000
  <<: *k8s_after_script_template
  #  dependencies:
#  needs:
#    - cc7_docker_image_commit # @todo that would need tag as well, if it is a tag pipeline...
  tags:
    - k8s_node
#  only:
#    - schedules
  allow_failure: true
  retry: 1


#-------------------------------------------------------------------------------
# Testing framework
#-------------------------------------------------------------------------------

.system_test_after_script_template: &system_test_after_script_template
  after_script:
    - ./eos-docker/scripts/collect_logs.sh eos-logs/
    - sudo ./eos-docker/scripts/shutdown_services.sh

.system_test_template: &system_test_template_definition
  script:

    - sudo ./eos-docker/scripts/shutdown_services.sh
    - ./eos-docker/scripts/remove_unused_images.sh
#    - docker pull gitlab-registry.cern.ch/dss/${EOS_IMG_NAME}${CI_COMMIT_TAG-$CI_PIPELINE_ID}
#    - sudo ./eos-docker/scripts/start_services.sh -q -i gitlab-registry.cern.ch/dss/${EOS_IMG_NAME}${CI_COMMIT_TAG-$CI_PIPELINE_ID};
    - docker pull gitlab-registry.cern.ch/dss/${EOS_IMG_NAME}1414091
    - sudo ./eos-docker/scripts/start_services.sh -q -i gitlab-registry.cern.ch/dss/${EOS_IMG_NAME}1414091;

    - docker exec -i eos-mgm1 eos-instance-test-ci

    - if [[ "$CI_JOB_NAME" == system_test_qdb* ]]; then docker cp eos-cli1:/usr/sbin/eos-fsck-test .; ./eos-fsck-test --type docker; rm -rf eos-fsck-test; fi

    - docker exec -i eos-cli1 git clone https://gitlab.cern.ch/dss/eosclient-tests.git
    - docker exec -di eos-cli1 /bin/bash -c 'mkdir /eos1/; mount -t fuse eosxd -ofsname=mount-1 /eos1/'
    - docker exec -di eos-cli1 /bin/bash -c 'mkdir /eos2/; mount -t fuse eosxd -ofsname=mount-2 /eos2/'
    - docker exec -i eos-cli1 env EOS_MGM_URL=root://eos-mgm1.eoscluster.cern.ch bash -c 'cd /eosclient-tests; git checkout rtb_clone; prepare/clone_test.sh prepare; rc=$?; git checkout master; exit $rc'
    - docker exec -i -u eos-user eos-cli1 /bin/bash -c 'mkdir /eos1/dockertest/fusex_tests/; cd /eos1/dockertest/fusex_tests/; fusex-benchmark'
    # @todo(esindril): run "all" tests in schedule mode once these are properly supported
    # - if [ "$CI_PIPELINE_SOURCE" == "schedule" ]; then
    #     docker exec -i eos-mgm1 eos vid add gateway eos-cli1.eoscluster.cern.ch unix;
    #     docker exec -i eos-cli1 env EOS_FUSE_NO_ROOT_SQUASH=1 python /eosclient-tests/run.py --workdir="/eos1/dockertest /eos2/dockertest" ci;
    #   fi
    # until then just run the "ci" tests
    - docker exec -i eos-cli1 /bin/bash -c 'cd eosclient-tests &&  for n in prepare/*.sh; do /bin/bash $n prepare; done'
    - docker exec -i -u eos-user eos-cli1 python /eosclient-tests/run.py --workdir="/eos1/dockertest /eos2/dockertest" ci;
    - docker exec -i eos-cli1 /bin/bash -c 'cd eosclient-tests && for n in prepare/*.sh; do /bin/bash $n cleanup; done'
    # - docker exec -i eos-cli1 env EOS_MGM_URL=root://eos-mgm1.eoscluster.cern.ch eos fuse mount /eos_fuse
    # - docker exec -i eos-cli1 env EOS_MGM_URL=root://eos-mgm1.eoscluster.cern.ch eos fuse mount /eos_fuse2
    # - docker exec -i eos-cli1 python /eosclient-tests/run.py --workdir="/eos_fuse/dockertest /eos_fuse2/dockertest" ci

  <<: *system_test_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs/

.ubuntu_system_test_template: &ubuntu_system_test_template_definition
  script:
    - sudo ./eos-docker/scripts/shutdown_services.sh
    - ./eos-docker/scripts/remove_unused_images.sh
    - docker pull gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - docker pull gitlab-registry.cern.ch/dss/${UBUNTU_EOS_IMG_NAME}${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    # Run the following tests only on the NS in QuarkDB
    - sudo ./eos-docker/scripts/start_services.sh -q -i gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID} -u gitlab-registry.cern.ch/dss/${UBUNTU_EOS_IMG_NAME}${CI_COMMIT_TAG-$CI_PIPELINE_ID};

    - docker exec -i eos-cli1 git clone https://gitlab.cern.ch/dss/eosclient-tests.git
    - docker exec -di eos-cli1 /bin/bash -c 'mkdir /eos1/; mount -t fuse eosxd -ofsname=mount-1 /eos1/'
    - docker exec -di eos-cli1 /bin/bash -c 'mkdir /eos2/; mount -t fuse eosxd -ofsname=mount-2 /eos2/'
    - docker exec -i -u eos-user eos-cli1 /bin/bash -c 'mkdir /eos1/dockertest/fusex_tests/; cd /eos1/dockertest/fusex_tests/; fusex-benchmark'
    # @todo(esindril): run "all" tests in schedule mode once these are properly supported
    # - if [ "$CI_PIPELINE_SOURCE" == "schedule" ]; then
    #     docker exec -i eos-mgm1 eos vid add gateway eos-cli1.eoscluster.cern.ch unix;
    #     docker exec -i eos-cli1 env EOS_FUSE_NO_ROOT_SQUASH=1 python /eosclient-tests/run.py --workdir="/eos1/dockertest /eos2/dockertest" ci;
    #   fi
    # until then just run the "ci" tests
    - docker exec -i -u eos-user eos-cli1 python /eosclient-tests/run.py --workdir="/eos1/dockertest /eos2/dockertest" ci;
  <<: *system_test_after_script_template
  artifacts:
    when: on_failure
    expire_in: 3 days
    paths:
      - eos-logs/

.unit_test_template: &unit_test_template
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y yum-plugin-priorities createrepo
    - createrepo ${BUILD_NAME}_artifacts/
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\npriority=2\n' >> /etc/yum.repos.d/eos-depend.repo
    - echo -e '[eos-artifacts]\nname=EOS artifacts\nbaseurl=file://'${PWD}'/'${BUILD_NAME}'_artifacts\ngpgcheck=0\nenabled=1\npriority=1' >> /etc/yum.repos.d/eos-artifacts.repo
    - yum install --nogpg --disablerepo="cern*" -y eos-client eos-server eos-test
    - eos-unit-tests
    - eos-fst-unit-tests
    - eos-fusex-tests
    - echo -e '[quarkdb]\nname=QuarkDB\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/quarkdb/tag/el7/x86_64/\ngpgcheck=0\nenabled=1\npriority=4\n' >> /etc/yum.repos.d/quarkdb.repo
    - yum install --nogpg -y --disablerepo="cern*" eos-test quarkdb
    - export EOS_QUARKDB_HOSTPORT=localhost:9999
    - export EOS_QUARKDB_PASSWD=password_must_be_atleast_32_characters
    - quarkdb-create --path /var/lib/quarkdb/node-1 --clusterID ns-test --nodes $EOS_QUARKDB_HOSTPORT
    - mkdir /var/log/quarkdb
    - chown -R daemon:daemon /var/lib/quarkdb /var/log/quarkdb
    - echo redis.password $EOS_QUARKDB_PASSWD >> /etc/xrd.cf.quarkdb
    - (xrootd -c /etc/xrd.cf.quarkdb -l /var/log/quarkdb/xrdlog.quarkdb -Rdaemon &) ; sleep 3
    - eos-ns-quarkdb-tests
  variables:
    BUILD_NAME: cc7

system_test_qdb:
  stage: test
  <<: *system_test_template_definition
  variables:
    EOS_IMG_NAME: "eos:"
  tags:
    - shell-with-docker
  dependencies:
    - clone_docker
  allow_failure: true
  retry: 1

system_test_qdb_xrd_testing:
  stage: test
  <<: *system_test_template_definition
  variables:
    EOS_IMG_NAME: "eos:xrd_testing_"
  tags:
    - shell-with-docker
  dependencies:
    - clone_docker
  only:
    - schedules
  allow_failure: true
  retry: 1

ubuntu_system_test:
  stage: test
  <<: *ubuntu_system_test_template_definition
  variables:
    UBUNTU_EOS_IMG_NAME: "eos:ubuntu_bionic_client_"
  tags:
    - shell-with-docker
  dependencies:
    - clone_docker
  only:
    - schedules
  allow_failure: true
  retry: 1

.unit_test:
  stage: test
  <<: *unit_test_template
#  dependencies:
#    - build_cc7
  tags:
    - docker_node

.unit_test_asan:
  stage: test
  <<: *unit_test_template
  variables:
    BUILD_NAME: cc7_asan
    LSAN_OPTIONS: "suppressions=/var/eos/test/LeakSanitizer.supp"  # Suppress known memory leaks
    ASAN_OPTIONS: "fast_unwind_on_malloc=0"  # Avoid indirect leaks from linked dependencies
#  dependencies:
#    - build_cc7_asan
  tags:
    - docker_node
  only:
    - schedules
  allow_failure: true

stress_test:
  stage: test
  script:
    - sudo ./eos-docker/scripts/shutdown_services.sh
    - ./eos-docker/scripts/remove_unused_images.sh
#    - docker pull gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}
#    - sudo ./eos-docker/scripts/start_services.sh -i gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - docker pull gitlab-registry.cern.ch/dss/eos:1414091
    - sudo ./eos-docker/scripts/start_services.sh -i gitlab-registry.cern.ch/dss/eos:1414091
    - docker exec -i eos-mgm1 hammer-runner.py --strict-exit-code 1 --gitlab --url eos-mgm1.eoscluster.cern.ch//eos/dockertest/hammer/ --protocols xroot --threads 1 2 10 100 --operations write stat read delete --runs 3 --nfiles 10000
    - sudo ./eos-docker/scripts/shutdown_services.sh
  tags:
    - shell-with-docker
  dependencies:
    - clone_docker
  allow_failure: true
  retry: 1

coverage_report:
  stage: test
  script:
    - sudo ./eos-docker/scripts/shutdown_services.sh
    - ./eos-docker/scripts/remove_unused_images.sh
    - docker pull gitlab-registry.cern.ch/dss/${EOS_IMG_NAME}${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - sudo ./eos-docker/scripts/start_services.sh -i gitlab-registry.cern.ch/dss/${EOS_IMG_NAME}${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - ./eos-docker/coverage/eos-coverage-ci.sh
    - sudo -u stci cp -r ./eos-coverage/ /eos/project/s/storage-ci/www/eos-coverage-report/eos-coverage-${CI_COMMIT_TAG-$CI_PIPELINE_ID}/
    - sudo ./eos-docker/scripts/shutdown_services.sh
  variables:
    EOS_IMG_NAME: "eos:coverage_"
  tags:
    - shell-with-docker
  dependencies:
    - clone_docker
  only:
    variables:
      - $COVERAGE_SCHEDULE


#-------------------------------------------------------------------------------
# RPM publishing
#-------------------------------------------------------------------------------

.publish_koji_cc7:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sssd-client
    - yum install -y koji
    - mkdir ~/.koji
    - echo -e '[koji]\nserver = https://kojihub.cern.ch/kojihub\nweburl = https://koji.cern.ch/\ntopurl = https://koji.cern.ch/kojifiles\nkrb_canon_host = no\nkrb_rdns = False\n' >> ~/.koji/config
    - kinit stci@CERN.CH -k -t /stci.krb5/stci.keytab
    - koji build eos7 cc7_artifacts/SRPMS/*.src.rpm
  tags:
    - docker_node
  dependencies:
    - build_cc7
  only:
    - tags

.publish_koji_slc6:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sssd-client
    - yum install -y koji
    - mkdir ~/.koji
    - echo -e '[koji]\nserver = https://kojihub.cern.ch/kojihub\nweburl = https://koji.cern.ch/\ntopurl = https://koji.cern.ch/kojifiles\nkrb_canon_host = no\nkrb_rdns = False\n' >> ~/.koji/config
    - kinit stci@CERN.CH -k -t /stci.krb5/stci.keytab
    - koji build eos6 slc6_artifacts/SRPMS/*.src.rpm
  tags:
    - docker_node
  dependencies:
    - build_slc6
  only:
    - tags

.rpm_commit_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ $CI_COMMIT_TAG ]]; then echo "This only works for commits"; exit 0; else BUILD_TYPE="commit"; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts.sh ${BRANCH} ${BUILD_TYPE} /eos/project/s/storage-ci/www/eos
  tags:
    - docker_node
  except:
    - tags
  allow_failure: true
  when: manual

.rpm_testing_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE="tag/testing"; else BUILD_TYPE="commit"; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts.sh ${BRANCH} ${BUILD_TYPE} /eos/project/s/storage-ci/www/eos
  tags:
    - docker_node
  only:
    - master
    - dev
    - tags
  retry: 2

.rpm_stable_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE="tag"; else echo "This only works for tags"; exit 0; fi
    - ./gitlab-ci/store_artifacts.sh ${BRANCH} ${BUILD_TYPE} /mnt/eos_repositories/eos
    - sudo -u stci -H ./gitlab-ci/store_stable_artifacts.sh ${BRANCH} /eos/project/s/storage-ci/www/eos ${CI_COMMIT_TAG}
    - echo ${CI_COMMIT_TAG} | sudo -u stci tee /eos/project/s/storage-ci/www/eos/${BRANCH}/tag/latest_version
  tags:
    - docker_node
  only:
    - tags
  dependencies: []
  when: manual

.debian_artifacts:
  stage: publish
  image: ubuntu:bionic
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd gpg
    - mkdir /home/stci
    - chown -R stci:def-cg /home/stci
    - chmod -R 700 /home/stci
    - sudo -u stci -H gpg --homedir /home/stci/ --allow-secret-key-import --import /keys/stci-debian-repo.sec
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts_debian.sh /eos/project/s/storage-ci/www/debian/eos/${BRANCH} ${BUILD_TYPE}
  tags:
    - docker_node
  dependencies:
    - build_ubuntu_bionic
  only:
    - master
    - dev
    - tags
  retry: 2
  allow_failure: true

.debian_artifacts_volume:
  stage: publish
  image: ubuntu:bionic
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd gpg
    - mkdir /home/stci
    - gpg --homedir /home/stci/ --allow-secret-key-import --import /keys/stci-debian-repo.sec
    - ./gitlab-ci/store_artifacts_debian.sh /mnt/eos_repositories/debian/eos/${BRANCH} tag
  tags:
    - docker_node
  dependencies:
    - build_ubuntu_bionic
  only:
    - tags


#-------------------------------------------------------------------------------
# RPM cleaning
#-------------------------------------------------------------------------------

clean_rpm_artifacts:
  stage: clean
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sssd-client sudo createrepo
    - sudo -u stci -H ./gitlab-ci/remove_old_artifacts.sh
  tags:
    - docker_node
  allow_failure: true
  only:
    - triggers
    - schedules

clean_debian_artifacts:
  stage: clean
  image: ubuntu:bionic
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd gpg
    - mkdir /home/stci
    - chown -R stci:def-cg /home/stci
    - chmod -R 700 /home/stci
    - sudo -u stci -H gpg --homedir /home/stci/ --allow-secret-key-import --import /keys/stci-debian-repo.sec
    - sudo -u stci -H ./gitlab-ci/remove_old_artifacts_debian.sh
  tags:
    - docker_node
  allow_failure: true
  only:
    - schedules

clean_k8s_cluster:
  stage: clean
  script:
    - set +o pipefail
    - . /home/gitlab-runner/coe-cluster-config/st-gitlab-k8s-02/env_st-gitlab-k8s-02.sh # get access configs for the cluster
    - kubectl get pods --no-headers --all-namespaces |
      grep -E 'ImagePullBackOff|ErrImagePull|Evicted' |
      awk '{print $2 " --namespace=" $1}' |
      xargs --no-run-if-empty -n2 kubectl delete pods
    - kubectl get namespaces --no-headers -o custom-columns=":metadata.name,:.metadata.creationTimestamp" |
      grep -v 'default\|kube-public\|kube-system' |
      awk '$2 <= "'$( date --utc -d "3 days ago" +"%Y-%m-%dT%H:%M:%SZ" )'" { print $1 }' |
      xargs --no-run-if-empty kubectl delete namespaces
  dependencies: []
  tags:
    - shell-with-docker
    - k8s_node
  allow_failure: true
  only:
    - schedules


#-------------------------------------------------------------------------------
# Manually triggered builds
#-------------------------------------------------------------------------------

.eos_nginx_slc6:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git tar sudo createrepo
    - cd nginx
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - groupadd --gid 2766 def-cg
    - useradd -u 102230 -g def-cg stci
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
    - slc6
  when: manual
  environment:
    name: nginx-slc6-prod

.eos_nginx_cc7:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git sssd-client sudo createrepo
    - cd nginx
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual
  environment:
    name: nginx-cc7-prod

.eos_apmon_slc6:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git tar sudo createrepo
    - cd ApMon
    - ./maketar.sh
    - mkdir -p rpmbuild/{BUILD,BUILDROT,RPMS,SOURCES,SPECS,SRPMS}
    - cp eos-apmon-*.tar.gz rpmbuild/SOURCES
    - rpmbuild --define "_source_filedigest_algorithm md5" --define "_binary_filedigest_algorithm md5" --define "_topdir ./rpmbuild" -bs eos-apmon.spec
    - yum-builddep --nogpgcheck -y rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - rpmbuild --rebuild --define "_rpmdir rpmbuild/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - groupadd --gid 2766 def-cg
    - useradd -u 102230 -g def-cg stci
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/SRPM
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/SRPMS/*.src.rpm $STORAGE_PATH
  tags:
    - docker_node
    - slc6
  when: manual
  environment:
    name: apmon-slc6-prod

.eos_apmon_cc7:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git sssd-client sudo createrepo
    - cd ApMon
    - ./maketar.sh
    - rpmbuild --define "_source_filedigest_algorithm md5" --define "_binary_filedigest_algorithm md5" --define "_topdir ./rpmbuild" -ts eos-apmon-*.tar.gz
    - yum-builddep --nogpgcheck -y rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - rpmbuild --rebuild --define "_rpmdir rpmbuild/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual
  environment:
    name: apmon-cc7-prod

.eos_microhttpd_slc6:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ make rpm-build which git tar sudo createrepo
    - cd microhttpd
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/x86_64
    - groupadd --gid 2766 def-cg
    - useradd -u 102230 -g def-cg stci
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
    - fedora_rawhide
  when: manual

.eos_microhttpd_cc7:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ make rpm-build which git sssd-client sudo createrepo
    - cd microhttpd
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual

.eos_docs:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y make python-sphinx sssd-client sudo which git
    - cd doc
    - export PYTHONPATH=`pwd`/_themes/
    - make html
    - sudo -u stci -H bash -c "rm -rf /eos/project/e/eos/www/docs/*"
    - sudo -u stci -H cp -R _build/html/* /eos/project/e/eos/www/docs/
  tags:
    - docker_node
  when: manual

.eos_repopackage:
  stage: build:manual
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y rpm-build sssd-client sudo createrepo
    - mkdir build
    - cd build
    - rpmbuild --bb --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" ../elrepopackage.spec
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}/tag/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}/tag/el-6/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker_node
  when: manual
